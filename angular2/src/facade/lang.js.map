{"version":3,"sources":["@traceur/generated/TemplateParser/5","src/facade/lang.es6","@traceur/generated/TemplateParser/13","@traceur/generated/TemplateParser/4","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/7","@traceur/generated/TemplateParser/18","@traceur/generated/TemplateParser/6","@traceur/generated/TemplateParser/10","@traceur/generated/TemplateParser/22","src/facade/@traceur/generated/TemplateParser/24","src/facade/@traceur/generated/TemplateParser/23","@traceur/generated/TemplateParser/12","@traceur/generated/TemplateParser/11","@traceur/generated/TemplateParser/17","src/facade/lang.js"],"names":[],"mappings":"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","file":"src/facade/lang.js","sourceRoot":"/Users/deast/Angular/quickstart/node_modules/angular2/es6/prod/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","var _global = typeof window === 'undefined' ? global : window;\nexport {_global as global};\n\nexport var Type = Function;\nexport var Math = _global.Math;\nexport var Date = _global.Date;\n\nvar assertionsEnabled_ = typeof assert !== 'undefined';\n\nvar int;\n// global assert support, as Dart has it...\n// TODO: `assert` calls need to be removed in production code!\nif (assertionsEnabled_) {\n  _global.assert = assert;\n  // `int` is not a valid JS type\n  int = assert.define('int', function(value) {\n    return typeof value === 'number' && value%1 === 0;\n  });\n} else {\n  int = {};\n  _global.assert = function() {};\n}\nexport {int};\n\nexport class CONST {}\nexport class ABSTRACT {}\nexport class IMPLEMENTS {}\n\nexport function isPresent(obj):boolean {\n  return obj !== undefined && obj !== null;\n}\n\nexport function isBlank(obj):boolean {\n  return obj === undefined || obj === null;\n}\n\nexport function isString(obj):boolean {\n  return typeof obj === \"string\";\n}\n\nexport function isFunction(obj):boolean {\n  return typeof obj === \"function\";\n}\n\nexport function stringify(token):string {\n  if (typeof token === 'string') {\n    return token;\n  }\n\n  if (token === undefined || token === null) {\n    return '' + token;\n  }\n\n  if (token.name) {\n    return token.name;\n  }\n\n  return token.toString();\n}\n\nexport class StringWrapper {\n  static fromCharCode(code:int):string {\n    return String.fromCharCode(code);\n  }\n\n  static charCodeAt(s:string, index:int) {\n    return s.charCodeAt(index);\n  }\n\n  static split(s:string, regExp:RegExp) {\n    return s.split(regExp.multiple);\n  }\n\n  static equals(s:string, s2:string):boolean {\n    return s === s2;\n  }\n\n  static replace(s:string, from , replace:string): string {\n    if (typeof(from) === \"string\") {\n      return s.replace(from, replace);\n    } else {\n      return s.replace(from.single, replace);\n    }\n  }\n\n  static replaceAll(s:string, from:RegExp, replace:string):string {\n    return s.replace(from.multiple, replace);\n  }\n\n  static startsWith(s:string, start:string) {\n    return s.startsWith(start);\n  }\n\n  static substring(s:string, start:int, end:int = null) {\n    return s.substring(start, end === null ? undefined: end);\n  }\n\n  static replaceAllMapped(s:string, from:RegExp, cb:Function): string {\n    return s.replace(from.multiple, function(...matches) {\n      // Remove offset & string from the result array\n      matches.splice(-2, 2);\n      // The callback receives match, p1, ..., pn\n      return cb(matches);\n    });\n  }\n\n  static contains(s:string, substr:string): boolean {\n    return s.indexOf(substr) != -1;\n  }\n}\n\nexport class StringJoiner {\n  constructor() {\n    this.parts = [];\n  }\n\n  add(part:string) {\n    this.parts.push(part);\n  }\n\n  toString():string {\n    return this.parts.join(\"\");\n  }\n}\n\nexport class NumberParseError extends Error {\n  constructor(message) {\n    super();\n    this.message = message;\n  }\n\n  toString() {\n    return this.message;\n  }\n}\n\n\nexport class NumberWrapper {\n  static toFixed(n:number, fractionDigits:int):string {\n    return n.toFixed(fractionDigits);\n  }\n\n  static equal(a, b):boolean {\n    return a === b;\n  }\n\n  static parseIntAutoRadix(text:string):int {\n    var result:int = parseInt(text);\n    if (isNaN(result)) {\n      throw new NumberParseError(\"Invalid integer literal when parsing \" + text);\n    }\n    return result;\n  }\n\n  static parseInt(text:string, radix:int):int {\n    if (radix == 10) {\n      if (/^(\\-|\\+)?[0-9]+$/.test(text)) {\n        return parseInt(text, radix);\n      }\n    } else if (radix == 16) {\n      if (/^(\\-|\\+)?[0-9ABCDEFabcdef]+$/.test(text)) {\n        return parseInt(text, radix);\n      }\n    } else {\n      var result:int = parseInt(text, radix);\n      if (!isNaN(result)) {\n        return result;\n      }\n    }\n    throw new NumberParseError(\"Invalid integer literal when parsing \" + text + \" in base \" + radix);\n  }\n\n  // TODO: NaN is a valid literal but is returned by parseFloat to indicate an error.\n  static parseFloat(text:string):number {\n    return parseFloat(text);\n  }\n\n  static get NaN():number {\n    return NaN;\n  }\n\n  static isNaN(value):boolean {\n    return isNaN(value);\n  }\n\n  static isInteger(value):boolean {\n    return Number.isInteger(value);\n  }\n}\n\nexport var RegExp;\nif (assertionsEnabled_) {\n  RegExp = assert.define('RegExp', function(obj) {\n    assert(obj).is(assert.structure({\n      single: _global.RegExp,\n      multiple: _global.RegExp\n    }));\n  });\n} else {\n  RegExp = {};\n}\n\nexport class RegExpWrapper {\n  static create(regExpStr, flags:string = ''):RegExp {\n    flags = flags.replace(/g/g, '');\n    return {\n      multiple: new _global.RegExp(regExpStr, flags + 'g'),\n      single: new _global.RegExp(regExpStr, flags)\n    };\n  }\n  static firstMatch(regExp, input) {\n    return input.match(regExp.single);\n  }\n  static matcher(regExp, input) {\n    // Reset regex state for the case\n    // someone did not loop over all matches\n    // last time.\n    regExp.multiple.lastIndex = 0;\n    return {\n      re: regExp.multiple,\n      input: input\n    };\n  }\n}\n\nexport class RegExpMatcherWrapper {\n  static next(matcher) {\n    return matcher.re.exec(matcher.input);\n  }\n}\n\nexport class FunctionWrapper {\n  static apply(fn:Function, posArgs) {\n    return fn.apply(null, posArgs);\n  }\n}\n\n// No subclass so that we preserve error stack.\nexport var BaseException = Error;\n\n// JS has NaN !== NaN\nexport function looseIdentical(a, b):boolean {\n  return a === b ||\n         typeof a === \"number\" && typeof b === \"number\" && isNaN(a) && isNaN(b);\n}\n\n// JS considers NaN is the same as NaN for map Key (while NaN !== NaN otherwise)\n// see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\nexport function getMapKey(value) {\n  return value;\n}\n\nexport function normalizeBlank(obj) {\n  return isBlank(obj) ? null : obj;\n}\n\nexport function isJsObject(o):boolean {\n  return o !== null && (typeof o === \"function\" || typeof o === \"object\");\n}\n\nexport function assertionsEnabled():boolean {\n  return assertionsEnabled_;\n}\n\nexport function print(obj) {\n  if (obj instanceof Error) {\n    console.log(obj.stack);\n  } else {\n    console.log(obj);\n  }\n}\n\n// Can't be all uppercase as our transpiler would think it is a special directive...\nexport var Json = _global.JSON;\n\nexport class DateWrapper {\n  static fromMillis(ms) {\n    return new Date(ms);\n  }\n  static toMillis(date:Date) {\n    return date.getTime();\n  }\n  static now() {\n    return new Date();\n  }\n  static toJson(date) {\n    return date.toJSON();\n  }\n}\n","\n        $__export($__placeholder__0, $__placeholder__1)\n      ","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","$__export($__placeholder__0, $__placeholder__1);","$__export($__placeholder__0, $__placeholder__1)","$__export($__placeholder__0, $__placeholder__1)}","var $__placeholder__0 = $__export($__placeholder__1, $__placeholder__2);","function() {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4);\n        }()","\n            for (var $__placeholder__0 = [], $__placeholder__1 = 0;\n                 $__placeholder__2 < arguments.length; $__placeholder__3++)\n              $__placeholder__4[$__placeholder__5] = arguments[$__placeholder__6];","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.type.$__placeholder__0)","function($__super) {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4, $__super);\n        }($__placeholder__5)","$traceurRuntime.superConstructor($__placeholder__0).call($__placeholder__1)","$__export($__placeholder__0, $__placeholder__1)","var _global = typeof window === 'undefined' ? global : window;\nexport {_global as global};\nexport var Type = Function;\nexport var Math = _global.Math;\nexport var Date = _global.Date;\nvar assertionsEnabled_ = typeof assert !== 'undefined';\nvar int;\nif (assertionsEnabled_) {\n  _global.assert = assert;\n  int = assert.define('int', function(value) {\n    return typeof value === 'number' && value % 1 === 0;\n  });\n} else {\n  int = {};\n  _global.assert = function() {};\n}\nexport {int};\nexport class CONST {}\nexport class ABSTRACT {}\nexport class IMPLEMENTS {}\nexport function isPresent(obj) {\n  return obj !== undefined && obj !== null;\n}\nexport function isBlank(obj) {\n  return obj === undefined || obj === null;\n}\nexport function isString(obj) {\n  return typeof obj === \"string\";\n}\nexport function isFunction(obj) {\n  return typeof obj === \"function\";\n}\nexport function stringify(token) {\n  if (typeof token === 'string') {\n    return token;\n  }\n  if (token === undefined || token === null) {\n    return '' + token;\n  }\n  if (token.name) {\n    return token.name;\n  }\n  return token.toString();\n}\nexport class StringWrapper {\n  static fromCharCode(code) {\n    return String.fromCharCode(code);\n  }\n  static charCodeAt(s, index) {\n    return s.charCodeAt(index);\n  }\n  static split(s, regExp) {\n    return s.split(regExp.multiple);\n  }\n  static equals(s, s2) {\n    return s === s2;\n  }\n  static replace(s, from, replace) {\n    if (typeof(from) === \"string\") {\n      return s.replace(from, replace);\n    } else {\n      return s.replace(from.single, replace);\n    }\n  }\n  static replaceAll(s, from, replace) {\n    return s.replace(from.multiple, replace);\n  }\n  static startsWith(s, start) {\n    return s.startsWith(start);\n  }\n  static substring(s, start, end = null) {\n    return s.substring(start, end === null ? undefined : end);\n  }\n  static replaceAllMapped(s, from, cb) {\n    return s.replace(from.multiple, function(...matches) {\n      matches.splice(-2, 2);\n      return cb(matches);\n    });\n  }\n  static contains(s, substr) {\n    return s.indexOf(substr) != -1;\n  }\n}\nObject.defineProperty(StringWrapper.fromCharCode, \"parameters\", {get: function() {\n    return [[int]];\n  }});\nObject.defineProperty(StringWrapper.charCodeAt, \"parameters\", {get: function() {\n    return [[assert.type.string], [int]];\n  }});\nObject.defineProperty(StringWrapper.split, \"parameters\", {get: function() {\n    return [[assert.type.string], [RegExp]];\n  }});\nObject.defineProperty(StringWrapper.equals, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string]];\n  }});\nObject.defineProperty(StringWrapper.replace, \"parameters\", {get: function() {\n    return [[assert.type.string], [], [assert.type.string]];\n  }});\nObject.defineProperty(StringWrapper.replaceAll, \"parameters\", {get: function() {\n    return [[assert.type.string], [RegExp], [assert.type.string]];\n  }});\nObject.defineProperty(StringWrapper.startsWith, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string]];\n  }});\nObject.defineProperty(StringWrapper.substring, \"parameters\", {get: function() {\n    return [[assert.type.string], [int], [int]];\n  }});\nObject.defineProperty(StringWrapper.replaceAllMapped, \"parameters\", {get: function() {\n    return [[assert.type.string], [RegExp], [Function]];\n  }});\nObject.defineProperty(StringWrapper.contains, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string]];\n  }});\nexport class StringJoiner {\n  constructor() {\n    this.parts = [];\n  }\n  add(part) {\n    this.parts.push(part);\n  }\n  toString() {\n    return this.parts.join(\"\");\n  }\n}\nObject.defineProperty(StringJoiner.prototype.add, \"parameters\", {get: function() {\n    return [[assert.type.string]];\n  }});\nexport class NumberParseError extends Error {\n  constructor(message) {\n    super();\n    this.message = message;\n  }\n  toString() {\n    return this.message;\n  }\n}\nexport class NumberWrapper {\n  static toFixed(n, fractionDigits) {\n    return n.toFixed(fractionDigits);\n  }\n  static equal(a, b) {\n    return a === b;\n  }\n  static parseIntAutoRadix(text) {\n    var result = parseInt(text);\n    if (isNaN(result)) {\n      throw new NumberParseError(\"Invalid integer literal when parsing \" + text);\n    }\n    return result;\n  }\n  static parseInt(text, radix) {\n    if (radix == 10) {\n      if (/^(\\-|\\+)?[0-9]+$/.test(text)) {\n        return parseInt(text, radix);\n      }\n    } else if (radix == 16) {\n      if (/^(\\-|\\+)?[0-9ABCDEFabcdef]+$/.test(text)) {\n        return parseInt(text, radix);\n      }\n    } else {\n      var result = parseInt(text, radix);\n      if (!isNaN(result)) {\n        return result;\n      }\n    }\n    throw new NumberParseError(\"Invalid integer literal when parsing \" + text + \" in base \" + radix);\n  }\n  static parseFloat(text) {\n    return parseFloat(text);\n  }\n  static get NaN() {\n    return NaN;\n  }\n  static isNaN(value) {\n    return isNaN(value);\n  }\n  static isInteger(value) {\n    return Number.isInteger(value);\n  }\n}\nObject.defineProperty(NumberWrapper.toFixed, \"parameters\", {get: function() {\n    return [[assert.type.number], [int]];\n  }});\nObject.defineProperty(NumberWrapper.parseIntAutoRadix, \"parameters\", {get: function() {\n    return [[assert.type.string]];\n  }});\nObject.defineProperty(NumberWrapper.parseInt, \"parameters\", {get: function() {\n    return [[assert.type.string], [int]];\n  }});\nObject.defineProperty(NumberWrapper.parseFloat, \"parameters\", {get: function() {\n    return [[assert.type.string]];\n  }});\nexport var RegExp;\nif (assertionsEnabled_) {\n  RegExp = assert.define('RegExp', function(obj) {\n    assert(obj).is(assert.structure({\n      single: _global.RegExp,\n      multiple: _global.RegExp\n    }));\n  });\n} else {\n  RegExp = {};\n}\nexport class RegExpWrapper {\n  static create(regExpStr, flags = '') {\n    flags = flags.replace(/g/g, '');\n    return {\n      multiple: new _global.RegExp(regExpStr, flags + 'g'),\n      single: new _global.RegExp(regExpStr, flags)\n    };\n  }\n  static firstMatch(regExp, input) {\n    return input.match(regExp.single);\n  }\n  static matcher(regExp, input) {\n    regExp.multiple.lastIndex = 0;\n    return {\n      re: regExp.multiple,\n      input: input\n    };\n  }\n}\nObject.defineProperty(RegExpWrapper.create, \"parameters\", {get: function() {\n    return [[], [assert.type.string]];\n  }});\nexport class RegExpMatcherWrapper {\n  static next(matcher) {\n    return matcher.re.exec(matcher.input);\n  }\n}\nexport class FunctionWrapper {\n  static apply(fn, posArgs) {\n    return fn.apply(null, posArgs);\n  }\n}\nObject.defineProperty(FunctionWrapper.apply, \"parameters\", {get: function() {\n    return [[Function], []];\n  }});\nexport var BaseException = Error;\nexport function looseIdentical(a, b) {\n  return a === b || typeof a === \"number\" && typeof b === \"number\" && isNaN(a) && isNaN(b);\n}\nexport function getMapKey(value) {\n  return value;\n}\nexport function normalizeBlank(obj) {\n  return isBlank(obj) ? null : obj;\n}\nexport function isJsObject(o) {\n  return o !== null && (typeof o === \"function\" || typeof o === \"object\");\n}\nexport function assertionsEnabled() {\n  return assertionsEnabled_;\n}\nexport function print(obj) {\n  if (obj instanceof Error) {\n    console.log(obj.stack);\n  } else {\n    console.log(obj);\n  }\n}\nexport var Json = _global.JSON;\nexport class DateWrapper {\n  static fromMillis(ms) {\n    return new Date(ms);\n  }\n  static toMillis(date) {\n    return date.getTime();\n  }\n  static now() {\n    return new Date();\n  }\n  static toJson(date) {\n    return date.toJSON();\n  }\n}\nObject.defineProperty(DateWrapper.toMillis, \"parameters\", {get: function() {\n    return [[Date]];\n  }});\n\n//# sourceMappingURL=/Users/tbosch/projects/temp/angular2_clone/modules/angular2/src/facade/lang.map\n\n//# sourceMappingURL=./lang.map"]}