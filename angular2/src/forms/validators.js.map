{"version":3,"sources":["validators.js"],"names":[],"mappings":"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","file":"src/forms/validators.js","sourceRoot":"/Users/justin/workspace/angular2_quckstart/quickstart/node_modules/angular2/es6/prod/","sourcesContent":["import {isBlank,\n  isPresent} from 'angular2/src/facade/lang';\nimport {List,\n  ListWrapper,\n  StringMapWrapper} from 'angular2/src/facade/collection';\nimport * as modelModule from './model';\nexport class Validators {\n  static required(c) {\n    return isBlank(c.value) || c.value == \"\" ? {\"required\": true} : null;\n  }\n  static nullValidator(c) {\n    return null;\n  }\n  static compose(validators) {\n    return function(c) {\n      var res = ListWrapper.reduce(validators, (res, validator) => {\n        var errors = validator(c);\n        return isPresent(errors) ? StringMapWrapper.merge(res, errors) : res;\n      }, {});\n      return StringMapWrapper.isEmpty(res) ? null : res;\n    };\n  }\n  static group(c) {\n    var res = {};\n    StringMapWrapper.forEach(c.controls, (control, name) => {\n      if (c.contains(name) && isPresent(control.errors)) {\n        Validators._mergeErrors(control, res);\n      }\n    });\n    return StringMapWrapper.isEmpty(res) ? null : res;\n  }\n  static array(c) {\n    var res = {};\n    ListWrapper.forEach(c.controls, (control) => {\n      if (isPresent(control.errors)) {\n        Validators._mergeErrors(control, res);\n      }\n    });\n    return StringMapWrapper.isEmpty(res) ? null : res;\n  }\n  static _mergeErrors(control, res) {\n    StringMapWrapper.forEach(control.errors, (value, error) => {\n      if (!StringMapWrapper.contains(res, error)) {\n        res[error] = [];\n      }\n      ListWrapper.push(res[error], control);\n    });\n  }\n}\nObject.defineProperty(Validators.required, \"parameters\", {get: function() {\n    return [[modelModule.Control]];\n  }});\nObject.defineProperty(Validators.nullValidator, \"parameters\", {get: function() {\n    return [[assert.type.any]];\n  }});\nObject.defineProperty(Validators.compose, \"parameters\", {get: function() {\n    return [[assert.genericType(List, Function)]];\n  }});\nObject.defineProperty(Validators.group, \"parameters\", {get: function() {\n    return [[modelModule.ControlGroup]];\n  }});\nObject.defineProperty(Validators.array, \"parameters\", {get: function() {\n    return [[modelModule.ControlArray]];\n  }});\n//# sourceMappingURL=validators.js.map\n\n//# sourceMappingURL=./validators.map"]}