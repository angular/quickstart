{"version":3,"sources":["@traceur/generated/TemplateParser/5","src/core/compiler/style_inliner.js","@traceur/generated/TemplateParser/4","@traceur/generated/TemplateParser/3","@traceur/generated/TemplateParser/9","@traceur/generated/TemplateParser/6","@traceur/generated/TemplateParser/10","@traceur/generated/TemplateParser/21","src/core/compiler/@traceur/generated/TemplateParser/24","src/core/compiler/@traceur/generated/TemplateParser/23","src/core/compiler/@traceur/generated/TemplateParser/37"],"names":[],"mappings":"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","file":"src/core/compiler/style_inliner.js","sourceRoot":"/Users/deast/Angular/quickstart/node_modules/angular2/es6/prod/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","import {Injectable} from 'angular2/di';\nimport {XHR} from 'angular2/src/core/compiler/xhr/xhr';\nimport {StyleUrlResolver} from 'angular2/src/core/compiler/style_url_resolver';\nimport {UrlResolver} from 'angular2/src/core/compiler/url_resolver';\n\nimport {ListWrapper} from 'angular2/src/facade/collection';\nimport {\n  isBlank,\n  isPresent,\n  RegExp,\n  RegExpWrapper,\n  StringWrapper,\n  normalizeBlank,\n} from 'angular2/src/facade/lang';\nimport {\n  Promise,\n  PromiseWrapper,\n} from 'angular2/src/facade/async';\n\n/**\n * Inline @import rules in the given CSS.\n *\n * When an @import rules is inlined, it's url are rewritten.\n */\n@Injectable()\nexport class StyleInliner {\n  _xhr: XHR;\n  _urlResolver: UrlResolver;\n  _styleUrlResolver: StyleUrlResolver;\n\n  constructor(xhr: XHR, styleUrlResolver: StyleUrlResolver, urlResolver: UrlResolver) {\n    this._xhr = xhr;\n    this._urlResolver = urlResolver;\n    this._styleUrlResolver = styleUrlResolver;\n  }\n\n  /**\n   * Inline the @imports rules in the given CSS text.\n   *\n   * The baseUrl is required to rewrite URLs in the inlined content.\n   *\n   * @param {string} cssText\n   * @param {string} baseUrl\n   * @returns {*} a Promise<string> when @import rules are present, a string otherwise\n   */\n  // TODO(vicb): Union types: returns either a Promise<string> or a string\n  // TODO(vicb): commented out @import rules should not be inlined\n  inlineImports(cssText: string, baseUrl: string) {\n    return this._inlineImports(cssText, baseUrl, []);\n  }\n\n  _inlineImports(cssText: string, baseUrl: string, inlinedUrls: List<string>) {\n    var partIndex = 0;\n    var parts = StringWrapper.split(cssText, _importRe);\n\n    if (parts.length === 1) {\n      // no @import rule found, return the original css\n      return cssText;\n    }\n\n    var promises = [];\n\n    while (partIndex < parts.length - 1) {\n      // prefix is the content before the @import rule\n      var prefix = parts[partIndex];\n      // rule is the parameter of the @import rule\n      var rule = parts[partIndex + 1];\n      var url = _extractUrl(rule);\n      if (isPresent(url)) {\n        url = this._urlResolver.resolve(baseUrl, url);\n      }\n      var mediaQuery = _extractMediaQuery(rule);\n      var promise;\n\n      if (isBlank(url)) {\n        promise = PromiseWrapper.resolve(`/* Invalid import rule: \"@import ${rule};\" */`);\n      } else if (ListWrapper.contains(inlinedUrls, url)) {\n        // The current import rule has already been inlined, return the prefix only\n        // Importing again might cause a circular dependency\n        promise = PromiseWrapper.resolve(prefix);\n      } else {\n        ListWrapper.push(inlinedUrls, url);\n        promise = PromiseWrapper.then(\n          this._xhr.get(url),\n          (css) => {\n            // resolve nested @import rules\n            css = this._inlineImports(css, url, inlinedUrls);\n            if (PromiseWrapper.isPromise(css)) {\n              // wait until nested @import are inlined\n              return css.then((css) => {\n                return prefix + this._transformImportedCss(css, mediaQuery, url) + '\\n'\n              }) ;\n            } else {\n              // there are no nested @import, return the css\n              return prefix + this._transformImportedCss(css, mediaQuery, url) + '\\n';\n            }\n          },\n          (error) => `/* failed to import ${url} */\\n`\n        );\n      }\n      ListWrapper.push(promises, promise);\n      partIndex += 2;\n    }\n\n    return PromiseWrapper.all(promises).then(function (cssParts) {\n      var cssText = cssParts.join('');\n      if (partIndex < parts.length) {\n        // append then content located after the last @import rule\n        cssText += parts[partIndex];\n      }\n      return cssText;\n    });\n  }\n\n  _transformImportedCss(css: string, mediaQuery: string, url: string): string {\n    css = this._styleUrlResolver.resolveUrls(css, url);\n    return _wrapInMediaRule(css, mediaQuery);\n  }\n}\n\n// Extracts the url from an import rule, supported formats:\n// - 'url' / \"url\",\n// - url(url) / url('url') / url(\"url\")\nfunction _extractUrl(importRule: string): string {\n  var match = RegExpWrapper.firstMatch(_urlRe, importRule);\n  if (isBlank(match)) return null;\n  return isPresent(match[1]) ? match[1] : match[2];\n}\n\n// Extracts the media query from an import rule.\n// Returns null when there is no media query.\nfunction _extractMediaQuery(importRule: string): string {\n  var match = RegExpWrapper.firstMatch(_mediaQueryRe, importRule);\n  if (isBlank(match)) return null;\n  var mediaQuery = match[1].trim();\n  return (mediaQuery.length > 0) ? mediaQuery: null;\n}\n\n// Wraps the css in a media rule when the media query is not null\nfunction _wrapInMediaRule(css: string, query: string): string {\n  return (isBlank(query)) ? css : `@media ${query} {\\n${css}\\n}`;\n}\n\nvar _importRe = RegExpWrapper.create('@import\\\\s+([^;]+);');\nvar _urlRe = RegExpWrapper.create(\n  'url\\\\(\\\\s*?[\\'\"]?([^\\'\")]+)[\\'\"]?|' + // url(url) or url('url') or url(\"url\")\n  '[\\'\"]([^\\'\")]+)[\\'\"]'                 // \"url\" or 'url'\n);\nvar _mediaQueryRe = RegExpWrapper.create('[\\'\"][^\\'\"]+[\\'\"]\\\\s*\\\\)?\\\\s*(.*)');\n","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","var $__placeholder__0 = $__export($__placeholder__1, $__placeholder__2);","function() {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4);\n        }()","void 0","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.type.$__placeholder__0)","assert.genericType($__placeholder__0)"]}