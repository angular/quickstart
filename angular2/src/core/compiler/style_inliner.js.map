{"version":3,"sources":["style_inliner.js"],"names":[],"mappings":"AAAA,KAAK,SAAS,AAAC,8OAAoB,UAAS,SAAQ;;;;;;;;;;;;;;;;;;;AAsFpD,SAAS,YAAU,CAAE,UAAS,CAAG;AAC/B,AAAI,MAAA,CAAA,KAAI,EAAI,CAAA,aAAY,WAAW,AAAC,CAAC,MAAK,CAAG,WAAS,CAAC,CAAC;AACxD,OAAI,OAAM,AAAC,CAAC,KAAI,CAAC;AACf,WAAO,KAAG,CAAC;AAAA,AACb,SAAO,CAAA,SAAQ,AAAC,CAAC,KAAI,CAAE,CAAA,CAAC,CAAC,CAAA,CAAI,CAAA,KAAI,CAAE,CAAA,CAAC,EAAI,CAAA,KAAI,CAAE,CAAA,CAAC,CAAC;EAClD;AAAA,AAIA,SAAS,mBAAiB,CAAE,UAAS,CAAG;AACtC,AAAI,MAAA,CAAA,KAAI,EAAI,CAAA,aAAY,WAAW,AAAC,CAAC,aAAY,CAAG,WAAS,CAAC,CAAC;AAC/D,OAAI,OAAM,AAAC,CAAC,KAAI,CAAC;AACf,WAAO,KAAG,CAAC;AAAA,AACT,MAAA,CAAA,UAAS,EAAI,CAAA,KAAI,CAAE,CAAA,CAAC,KAAK,AAAC,EAAC,CAAC;AAChC,SAAO,CAAA,CAAC,UAAS,OAAO,EAAI,EAAA,CAAC,EAAI,WAAS,EAAI,KAAG,CAAC;EACpD;AAAA,AAIA,SAAS,iBAAe,CAAE,GAAE,CAAG,CAAA,KAAI,CAAG;AACpC,SAAO,CAAA,CAAC,OAAM,AAAC,CAAC,KAAI,CAAC,CAAC,EAAI,IAAE,IAAI,SAAS,EAAC,MAAI,EAAC,OAAM,EAAC,IAAE,EAAC,MAAI,CAAA,CAAC;EAChE;AA3GA,AA2GA,OA3GO;AACD,UAAM,GADZ,SAAS,IAAG,CAAG;AAAf,iBAAoB,KAAG,WAAkB,CAAC;IAElC,CAFR,UAAS,IAAG,CAAG;AAAf,UAAoB,KAAG,IAAkB,CAAC;IAElC,CAFR,UAAS,IAAG,CAAG;AAAf,uBAAoB,KAAG,iBAAkB,CAAC;IAElC,CAFR,UAAS,IAAG,CAAG;AAAf,kBAAoB,KAAG,YAAkB,CAAC;IAElC,CAFR,UAAS,IAAG,CAAG;AAAf,kBAAoB,KAAG,YAAkB,CAAC;IAElC,CAFR,UAAS,IAAG;AAAZ,cAAoB,KAAG,QAAkB,CAAC;AAA1C,gBAAoB,KAAG,UAAkB,CAAC;AAA1C,aAAoB,KAAG,OAAkB,CAAC;AAA1C,oBAAoB,KAAG,cAAkB,CAAC;AAA1C,oBAAoB,KAAG,cAAkB,CAAC;AAA1C,qBAAoB,KAAG,eAAkB,CAAC;IAElC,CAFR,UAAS,IAAG;AAAZ,cAAoB,KAAG,QAAkB,CAAC;AAA1C,qBAAoB,KAAG,eAAkB,CAAC;IAElC,CADuB;AACzB,UAAM;mBAFY,CAAA,SAAQ,AAAC,kBAAjC,SAAQ,AAAC;AACC,AAAI,UAAA,eAYP,SAAM,aAAW,CACV,GAAE,CAAG,CAAA,gBAAe,CAAG,CAAA,WAAU,CAAG;AAC9C,aAAG,KAAK,EAAI,IAAE,CAAC;AACf,aAAG,aAAa,EAAI,YAAU,CAAC;AAC/B,aAAG,kBAAkB,EAAI,iBAAe,CAAC;QAhBK,AAiBhD,CAjBiD;AACzC,aAAO,CAAA,CAAC,eAAc,YAAY,CAAC,AAAC;AAiB5C,sBAAY,CAAZ,UAAc,OAAM,CAAG,CAAA,OAAM,CAAG;AAC9B,iBAAO,CAAA,IAAG,eAAe,AAAC,CAAC,OAAM,CAAG,QAAM,CAAG,GAAC,CAAC,CAAC;UAClD;AACA,uBAAa,CAAb,UAAe,OAAM,CAAG,CAAA,OAAM,CAAG,CAAA,WAAU;;AACzC,AAAI,cAAA,CAAA,SAAQ,EAAI,EAAA,CAAC;AACjB,AAAI,cAAA,CAAA,KAAI,EAAI,CAAA,aAAY,MAAM,AAAC,CAAC,OAAM,CAAG,UAAQ,CAAC,CAAC;AACnD,eAAI,KAAI,OAAO,IAAM,EAAA,CAAG;AACtB,mBAAO,QAAM,CAAC;YAChB;AAAA,AACI,cAAA,CAAA,QAAO,EAAI,GAAC,CAAC;AACjB,kBAAO,SAAQ,EAAI,CAAA,KAAI,OAAO,EAAI,EAAA,CAAG;AACnC,AAAI,gBAAA,CAAA,MAAK,EAAI,CAAA,KAAI,CAAE,SAAQ,CAAC,CAAC;AAC7B,AAAI,gBAAA,CAAA,IAAG,EAAI,CAAA,KAAI,CAAE,SAAQ,EAAI,EAAA,CAAC,CAAC;AAC/B,AAAI,gBAAA,CAAA,GAAE,EAAI,CAAA,WAAU,AAAC,CAAC,IAAG,CAAC,CAAC;AAC3B,iBAAI,SAAQ,AAAC,CAAC,GAAE,CAAC,CAAG;AAClB,kBAAE,EAAI,CAAA,IAAG,aAAa,QAAQ,AAAC,CAAC,OAAM,CAAG,IAAE,CAAC,CAAC;cAC/C;AAAA,AACI,gBAAA,CAAA,UAAS,EAAI,CAAA,kBAAiB,AAAC,CAAC,IAAG,CAAC,CAAC;AACzC,AAAI,gBAAA,CAAA,OAAM,EArChB,KAAK,EAAA,AAqCW,CAAC;AACX,iBAAI,OAAM,AAAC,CAAC,GAAE,CAAC,CAAG;AAChB,sBAAM,EAAI,CAAA,cAAa,QAAQ,AAAC,EAAC,oCAAmC,EAAC,KAAG,EAAC,SAAM,EAAC,CAAC;cACnF,KAAO,KAAI,WAAU,SAAS,AAAC,CAAC,WAAU,CAAG,IAAE,CAAC,CAAG;AACjD,sBAAM,EAAI,CAAA,cAAa,QAAQ,AAAC,CAAC,MAAK,CAAC,CAAC;cAC1C,KAAO;AACL,0BAAU,KAAK,AAAC,CAAC,WAAU,CAAG,IAAE,CAAC,CAAC;AAClC,sBAAM,EAAI,CAAA,cAAa,KAAK,AAAC,CAAC,IAAG,KAAK,IAAI,AAAC,CAAC,GAAE,CAAC,GAAG,SAAC,GAAE;AACnD,oBAAE,EAAI,CAAA,mBAAkB,AAAC,CAAC,GAAE,CAAG,IAAE,CAAG,YAAU,CAAC,CAAC;AAChD,qBAAI,cAAa,UAAU,AAAC,CAAC,GAAE,CAAC,CAAG;AACjC,yBAAO,CAAA,GAAE,KAAK,AAAC,EAAC,SAAC,GAAE,CAAM;AACvB,2BAAO,CAAA,MAAK,EAAI,CAAA,0BAAyB,AAAC,CAAC,GAAE,CAAG,WAAS,CAAG,IAAE,CAAC,CAAA,CAAI,KAAG,CAAC;oBACzE,EAAC,CAAC;kBACJ,KAAO;AACL,yBAAO,CAAA,MAAK,EAAI,CAAA,0BAAyB,AAAC,CAAC,GAAE,CAAG,WAAS,CAAG,IAAE,CAAC,CAAA,CAAI,KAAG,CAAC;kBACzE;AAAA,gBACF,IAAG,SAAC,KAAI;yBAAM,sBAAsB,EAAC,IAAE,EAAC,QAAM;gBAAA,EAAC,CAAC;cAClD;AAAA,AACA,wBAAU,KAAK,AAAC,CAAC,QAAO,CAAG,QAAM,CAAC,CAAC;AACnC,sBAAQ,GAAK,EAAA,CAAC;YAChB;AAAA,AACA,iBAAO,CAAA,cAAa,IAAI,AAAC,CAAC,QAAO,CAAC,KAAK,AAAC,CAAC,SAAS,QAAO,CAAG;AAC1D,AAAI,gBAAA,CAAA,OAAM,EAAI,CAAA,QAAO,KAAK,AAAC,CAAC,EAAC,CAAC,CAAC;AAC/B,iBAAI,SAAQ,EAAI,CAAA,KAAI,OAAO,CAAG;AAC5B,sBAAM,GAAK,CAAA,KAAI,CAAE,SAAQ,CAAC,CAAC;cAC7B;AAAA,AACA,mBAAO,QAAM,CAAC;YAChB,CAAC,CAAC;UACJ;AACA,8BAAoB,CAApB,UAAsB,GAAE,CAAG,CAAA,UAAS,CAAG,CAAA,GAAE,CAAG;AAC1C,cAAE,EAAI,CAAA,IAAG,kBAAkB,YAAY,AAAC,CAAC,GAAE,CAAG,IAAE,CAAC,CAAC;AAClD,iBAAO,CAAA,gBAAe,AAAC,CAAC,GAAE,CAAG,WAAS,CAAC,CAAC;UAC1C;AAAA,aAlE8D,CAAC;MACzD,AAAC,EAAC,EAJ4D;AAuEtE,WAAK,eAAe,AAAC,CAAC,YAAW,CAAG,cAAY,CAAG,EAAC,GAAE,CAAG,UAAQ,AAAC,CAAE;AAChE,eAAO,EAAC,GAAI,WAAS,AAAC,EAAC,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;AACL,WAAK,eAAe,AAAC,CAAC,YAAW,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAQ,AAAC,CAAE;AAC/D,eAAO,EAAC,CAAC,GAAE,CAAC,CAAG,EAAC,gBAAe,CAAC,CAAG,EAAC,WAAU,CAAC,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;AACL,WAAK,eAAe,AAAC,CAAC,YAAW,UAAU,cAAc,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAQ,AAAC,CAAE;AACvF,eAAO,EAAC,CAAC,MAAK,KAAK,OAAO,CAAC,CAAG,EAAC,MAAK,KAAK,OAAO,CAAC,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;AACL,WAAK,eAAe,AAAC,CAAC,YAAW,UAAU,eAAe,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAQ,AAAC,CAAE;AACxF,eAAO,EAAC,CAAC,MAAK,KAAK,OAAO,CAAC,CAAG,EAAC,MAAK,KAAK,OAAO,CAAC,CAAG,EAAC,MAAK,YAAY,AAAC,CAAC,IAAG,CAAG,CAAA,MAAK,KAAK,OAAO,CAAC,CAAC,CAAC,CAAC;QACrG,CAAC,CAAC,CAAC;AACL,WAAK,eAAe,AAAC,CAAC,YAAW,UAAU,sBAAsB,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAQ,AAAC,CAAE;AAC/F,eAAO,EAAC,CAAC,MAAK,KAAK,OAAO,CAAC,CAAG,EAAC,MAAK,KAAK,OAAO,CAAC,CAAG,EAAC,MAAK,KAAK,OAAO,CAAC,CAAC,CAAC;QAC3E,CAAC,CAAC,CAAC;AAOL,WAAK,eAAe,AAAC,CAAC,WAAU,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAQ,AAAC,CAAE;AAC9D,eAAO,EAAC,CAAC,MAAK,KAAK,OAAO,CAAC,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;AAQL,WAAK,eAAe,AAAC,CAAC,kBAAiB,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAQ,AAAC,CAAE;AACrE,eAAO,EAAC,CAAC,MAAK,KAAK,OAAO,CAAC,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;AAIL,WAAK,eAAe,AAAC,CAAC,gBAAe,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAQ,AAAC,CAAE;AACnE,eAAO,EAAC,CAAC,MAAK,KAAK,OAAO,CAAC,CAAG,EAAC,MAAK,KAAK,OAAO,CAAC,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;gBACW,CAAA,aAAY,OAAO,AAAC,CAAC,qBAAoB,CAAC;aAC7C,CAAA,aAAY,OAAO,AAAC,CAAC,oCAAmC,EAAI,uBAAqB,CAAC;oBAC3E,CAAA,aAAY,OAAO,AAAC,CAAC,mCAAkC,CAAC;IA/G7C;EAC3B,CAAA;AADI,CAAC,CAAC;AAkH6B","file":"src/core/compiler/style_inliner.js","sourceRoot":"/Users/justin/workspace/angular2_quckstart/quickstart/node_modules/angular2/es6/prod/","sourcesContent":["import {Injectable} from 'angular2/di';\nimport {XHR} from 'angular2/src/core/compiler/xhr/xhr';\nimport {StyleUrlResolver} from 'angular2/src/core/compiler/style_url_resolver';\nimport {UrlResolver} from 'angular2/src/core/compiler/url_resolver';\nimport {ListWrapper} from 'angular2/src/facade/collection';\nimport {isBlank,\n  isPresent,\n  RegExp,\n  RegExpWrapper,\n  StringWrapper,\n  normalizeBlank} from 'angular2/src/facade/lang';\nimport {Promise,\n  PromiseWrapper} from 'angular2/src/facade/async';\nexport class StyleInliner {\n  constructor(xhr, styleUrlResolver, urlResolver) {\n    this._xhr = xhr;\n    this._urlResolver = urlResolver;\n    this._styleUrlResolver = styleUrlResolver;\n  }\n  inlineImports(cssText, baseUrl) {\n    return this._inlineImports(cssText, baseUrl, []);\n  }\n  _inlineImports(cssText, baseUrl, inlinedUrls) {\n    var partIndex = 0;\n    var parts = StringWrapper.split(cssText, _importRe);\n    if (parts.length === 1) {\n      return cssText;\n    }\n    var promises = [];\n    while (partIndex < parts.length - 1) {\n      var prefix = parts[partIndex];\n      var rule = parts[partIndex + 1];\n      var url = _extractUrl(rule);\n      if (isPresent(url)) {\n        url = this._urlResolver.resolve(baseUrl, url);\n      }\n      var mediaQuery = _extractMediaQuery(rule);\n      var promise;\n      if (isBlank(url)) {\n        promise = PromiseWrapper.resolve(`/* Invalid import rule: \"@import ${rule};\" */`);\n      } else if (ListWrapper.contains(inlinedUrls, url)) {\n        promise = PromiseWrapper.resolve(prefix);\n      } else {\n        ListWrapper.push(inlinedUrls, url);\n        promise = PromiseWrapper.then(this._xhr.get(url), (css) => {\n          css = this._inlineImports(css, url, inlinedUrls);\n          if (PromiseWrapper.isPromise(css)) {\n            return css.then((css) => {\n              return prefix + this._transformImportedCss(css, mediaQuery, url) + '\\n';\n            });\n          } else {\n            return prefix + this._transformImportedCss(css, mediaQuery, url) + '\\n';\n          }\n        }, (error) => `/* failed to import ${url} */\\n`);\n      }\n      ListWrapper.push(promises, promise);\n      partIndex += 2;\n    }\n    return PromiseWrapper.all(promises).then(function(cssParts) {\n      var cssText = cssParts.join('');\n      if (partIndex < parts.length) {\n        cssText += parts[partIndex];\n      }\n      return cssText;\n    });\n  }\n  _transformImportedCss(css, mediaQuery, url) {\n    css = this._styleUrlResolver.resolveUrls(css, url);\n    return _wrapInMediaRule(css, mediaQuery);\n  }\n}\nObject.defineProperty(StyleInliner, \"annotations\", {get: function() {\n    return [new Injectable()];\n  }});\nObject.defineProperty(StyleInliner, \"parameters\", {get: function() {\n    return [[XHR], [StyleUrlResolver], [UrlResolver]];\n  }});\nObject.defineProperty(StyleInliner.prototype.inlineImports, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string]];\n  }});\nObject.defineProperty(StyleInliner.prototype._inlineImports, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string], [assert.genericType(List, assert.type.string)]];\n  }});\nObject.defineProperty(StyleInliner.prototype._transformImportedCss, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string], [assert.type.string]];\n  }});\nfunction _extractUrl(importRule) {\n  var match = RegExpWrapper.firstMatch(_urlRe, importRule);\n  if (isBlank(match))\n    return null;\n  return isPresent(match[1]) ? match[1] : match[2];\n}\nObject.defineProperty(_extractUrl, \"parameters\", {get: function() {\n    return [[assert.type.string]];\n  }});\nfunction _extractMediaQuery(importRule) {\n  var match = RegExpWrapper.firstMatch(_mediaQueryRe, importRule);\n  if (isBlank(match))\n    return null;\n  var mediaQuery = match[1].trim();\n  return (mediaQuery.length > 0) ? mediaQuery : null;\n}\nObject.defineProperty(_extractMediaQuery, \"parameters\", {get: function() {\n    return [[assert.type.string]];\n  }});\nfunction _wrapInMediaRule(css, query) {\n  return (isBlank(query)) ? css : `@media ${query} {\\n${css}\\n}`;\n}\nObject.defineProperty(_wrapInMediaRule, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string]];\n  }});\nvar _importRe = RegExpWrapper.create('@import\\\\s+([^;]+);');\nvar _urlRe = RegExpWrapper.create('url\\\\(\\\\s*?[\\'\"]?([^\\'\")]+)[\\'\"]?|' + '[\\'\"]([^\\'\")]+)[\\'\"]');\nvar _mediaQueryRe = RegExpWrapper.create('[\\'\"][^\\'\"]+[\\'\"]\\\\s*\\\\)?\\\\s*(.*)');\n//# sourceMappingURL=style_inliner.js.map\n\n//# sourceMappingURL=./style_inliner.map"]}