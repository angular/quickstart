{"version":3,"sources":["@traceur/generated/TemplateParser/5","src/core/compiler/pipeline/directive_parser.js","@traceur/generated/TemplateParser/4","@traceur/generated/TemplateParser/3","@traceur/generated/TemplateParser/9","@traceur/generated/TemplateParser/6","@traceur/generated/TemplateParser/12","@traceur/generated/TemplateParser/11","src/core/compiler/pipeline/@traceur/generated/TemplateParser/8","src/core/compiler/pipeline/@traceur/generated/TemplateParser/26"],"names":[],"mappings":"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","file":"src/core/compiler/pipeline/directive_parser.js","sourceRoot":"/home/tonyo/projects/quickstart/node_modules/angular2/es6/prod/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","import {isPresent, isBlank, BaseException, assertionsEnabled, RegExpWrapper} from 'angular2/src/facade/lang';\nimport {List, MapWrapper, StringMapWrapper} from 'angular2/src/facade/collection';\nimport {DOM} from 'angular2/src/dom/dom_adapter';\nimport {SelectorMatcher} from '../selector';\nimport {CssSelector} from '../selector';\n\nimport {DirectiveMetadata} from '../directive_metadata';\nimport {Component, Viewport} from '../../annotations/annotations';\nimport {CompileStep} from './compile_step';\nimport {CompileElement} from './compile_element';\nimport {CompileControl} from './compile_control';\n\nimport {isSpecialProperty} from './element_binder_builder';\nimport {dashCaseToCamelCase, camelCaseToDashCase} from './util';\n\nvar PROPERTY_BINDING_REGEXP = RegExpWrapper.create('^ *([^\\\\s\\\\|]+)');\n\n/**\n * Parses the directives on a single element. Assumes ViewSplitter has already created\n * <template> elements for template directives.\n *\n * Fills:\n * - CompileElement#decoratorDirectives\n * - CompileElement#templateDirecitve\n * - CompileElement#componentDirective.\n *\n * Reads:\n * - CompileElement#propertyBindings (to find directives contained\n *   in the property bindings)\n * - CompileElement#variableBindings (to find directives contained\n *   in the variable bindings)\n */\nexport class DirectiveParser extends CompileStep {\n  _selectorMatcher:SelectorMatcher;\n  constructor(directives:List<DirectiveMetadata>) {\n    super();\n    var selector;\n\n    this._selectorMatcher = new SelectorMatcher();\n    for (var i=0; i<directives.length; i++) {\n      var directiveMetadata = directives[i];\n      selector=CssSelector.parse(directiveMetadata.annotation.selector);\n      this._selectorMatcher.addSelectable(selector, directiveMetadata);\n    }\n  }\n\n  process(parent:CompileElement, current:CompileElement, control:CompileControl) {\n    var attrs = current.attrs();\n    var classList = current.classList();\n\n    var cssSelector = new CssSelector();\n    cssSelector.setElement(DOM.nodeName(current.element));\n    for (var i=0; i < classList.length; i++) {\n      cssSelector.addClassName(classList[i]);\n    }\n\n    MapWrapper.forEach(attrs, (attrValue, attrName) => {\n      cssSelector.addAttribute(attrName, attrValue);\n    });\n\n    // Note: We assume that the ViewSplitter already did its work, i.e. template directive should\n    // only be present on <template> elements any more!\n    var isTemplateElement = DOM.isTemplateElement(current.element);\n    var matchedProperties; // StringMap - used in dev mode to store all properties that have been matched\n\n    this._selectorMatcher.match(cssSelector, (selector, directive) => {\n      matchedProperties = updateMatchedProperties(matchedProperties, selector, directive);\n      checkDirectiveValidity(directive, current, isTemplateElement);\n      current.addDirective(directive);\n    });\n\n    // raise error if some directives are missing\n    checkMissingDirectives(current, matchedProperties, isTemplateElement);\n  }\n}\n\n// calculate all the properties that are used or interpreted by all directives\n// those properties correspond to the directive selectors and the directive bindings\nfunction updateMatchedProperties(matchedProperties, selector, directive) {\n  if (assertionsEnabled()) {\n    var attrs = selector.attrs;\n    if (!isPresent(matchedProperties)) {\n      matchedProperties = StringMapWrapper.create();\n    }\n    if (isPresent(attrs)) {\n      for (var idx = 0; idx<attrs.length; idx+=2) {\n        // attribute name is stored on even indexes\n        StringMapWrapper.set(matchedProperties, dashCaseToCamelCase(attrs[idx]), true);\n      }\n    }\n    // some properties can be used by the directive, so we need to register them\n    if (isPresent(directive.annotation) && isPresent(directive.annotation.bind)) {\n      var bindMap = directive.annotation.bind;\n      StringMapWrapper.forEach(bindMap, (value, key) => {\n        // value is the name of the property that is interpreted\n        // e.g. 'myprop' or 'myprop | double' when a pipe is used to transform the property\n\n        // keep the property name and remove the pipe\n        var bindProp = RegExpWrapper.firstMatch(PROPERTY_BINDING_REGEXP, value);\n        if (isPresent(bindProp) && isPresent(bindProp[1])) {\n          StringMapWrapper.set(matchedProperties, dashCaseToCamelCase(bindProp[1]), true);\n        }\n      });\n    }\n  }\n  return matchedProperties;\n}\n\n// check if the directive is compatible with the current element\nfunction checkDirectiveValidity(directive, current, isTemplateElement) {\n  if (directive.annotation instanceof Viewport) {\n    if (!isTemplateElement) {\n      throw new BaseException(`Viewport directives need to be placed on <template> elements or elements ` +\n         `with template attribute - check ${current.elementDescription}`);\n    } else if (isPresent(current.viewportDirective)) {\n      throw new BaseException(`Only one viewport directive can be used per element - check ${current.elementDescription}`);\n    }\n  } else if (isTemplateElement) {\n    throw new BaseException(`Only template directives are allowed on template elements - check ${current.elementDescription}`);\n  } else if ((directive.annotation instanceof Component) && isPresent(current.componentDirective)) {\n    throw new BaseException(`Multiple component directives not allowed on the same element - check ${current.elementDescription}`);\n  }\n}\n\n// validates that there is no missing directive - dev mode only\nfunction checkMissingDirectives(current, matchedProperties, isTemplateElement) {\n  if (assertionsEnabled()) {\n    var ppBindings=current.propertyBindings;\n    if (isPresent(ppBindings)) {\n      // check that each property corresponds to a real property or has been matched by a directive\n      MapWrapper.forEach(ppBindings, (expression, prop) => {\n        if (!DOM.hasProperty(current.element, prop) && !isSpecialProperty(prop)) {\n          if (!isPresent(matchedProperties) || !isPresent(StringMapWrapper.get(matchedProperties, prop))) {\n            throw new BaseException(`Missing directive to handle '${camelCaseToDashCase(prop)}' in ${current.elementDescription}`);\n          }\n        }\n      });\n    }\n    // template only store directives as attribute when they are not bound to expressions\n    // so we have to validate the expression case too (e.g. !if=\"condition\")\n    if (isTemplateElement && !current.isViewRoot && !isPresent(current.viewportDirective)) {\n      throw new BaseException(`Missing directive to handle: ${current.elementDescription}`);\n    }\n  }\n}\n","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","var $__placeholder__0 = $__export($__placeholder__1, $__placeholder__2);","function($__super) {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4, $__super);\n        }($__placeholder__5)","$traceurRuntime.superConstructor($__placeholder__0).call($__placeholder__1)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.genericType($__placeholder__0)"]}