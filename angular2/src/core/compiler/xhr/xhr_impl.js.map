{"version":3,"sources":["@traceur/generated/TemplateParser/5","@traceur/generated/TemplateParser/4","@traceur/generated/TemplateParser/3","@traceur/generated/TemplateParser/9","@traceur/generated/TemplateParser/6","@traceur/generated/TemplateParser/12","src/core/compiler/xhr/xhr_impl.es6","@traceur/generated/TemplateParser/15","src/core/compiler/xhr/@traceur/generated/TemplateParser/8","src/core/compiler/xhr/@traceur/generated/TemplateParser/7","src/core/compiler/xhr/xhr_impl.js"],"names":[],"mappings":"AAAA,KAAK,SAAS,AAAC,wCAAoB,UAAS,SAAQ;;;;;;ACApD,OAAO;AACD,UAAM,GCDZ,SAAS,IAAG;ACAZ,cAAoB,KAAG,QAAkB,CAAC;AAA1C,qBAAoB,KAAG,eAAkB,CAAC;IDElC,CAFR,UAAS,IAAG,CAAG;ACAf,UAAoB,KAAG,IAAkB,CAAC;IDElC,CDDuB;AACzB,UAAM;cGFY,CAAA,SAAQ,AAAC,aCAjC,SAAS,QAAO;AACN,AAAI,UAAA,UCEP,SAAM,QAAM;ACHnB,wBAAc,iBAAiB,AAAC,SACL,MAAM,AAAC,CAAC,IAAG,CAAG,UAAQ,CAAC,CAAA;QFAA,ACyBlD,CDzBmD;AACzC,aAAO,CAAA,CAAC,eAAc,YAAY,CAAC,AAAC,WCE5C,GAAE,CAAF,UAAI,GAAE,CAA4B;AAC5B,cAAA,CAAA,SAAQ,EAAI,CAAA,cAAa,UAAU,AAAC,EAAC,CAAC;AACtC,cAAA,CAAA,GAAE,EAAI,IAAI,eAAa,AAAC,EAAC,CAAC;AAC9B,cAAE,KAAK,AAAE,CAAA,KAAI,CAAG,IAAE,CAAG,KAAG,CAAC,CAAC;AAC1B,cAAE,aAAa,EAAI,OAAK,CAAC;AAEzB,cAAE,OAAO,EAAI,UAAQ,AAAG,CAAA;AAClB,gBAAA,CAAA,MAAK,EAAI,CAAA,GAAE,OAAO,CAAC;AACvB,iBAAI,GAAE,GAAK,OAAK,CAAA,EAAK,CAAA,MAAK,GAAK,IAAE,CAAG;AAClC,wBAAQ,QAAS,AAAC,CAAA,GAAE,aAAa,CAAC,CAAC;cACrC,KAAO;AACL,wBAAQ,OAAQ,AAAC,EAAA,iBAAkB,EAAA,IAAE,EAAG,CAAC;cAC3C;AAAA,YACF,CAAC;AAED,cAAE,QAAQ,EAAI,UAAQ,AAAG,CAAA;AACvB,sBAAQ,OAAQ,AAAC,EAAA,iBAAkB,EAAA,IAAE,EAAG,CAAC;YAC3C,CAAC;AAED,cAAE,KAAK,AAAC,EAAC,CAAC;AACV,iBAAO,CAAA,SAAQ,QAAQ,CAAC;UAC1B,MDtBgE,SAAO,CAAC,CAAC;MACnE,AAAC,CCDoB,GAAE,CDCJ,EDJ2C;AE0BtE,WE1BK,eAAgB,CAAA,OAAA,UAAA,IAAA,CAAA,aAAA,CACZ,EAAA,GAAE,CAAG,UAAS,AAAE,CAAA;AAAC,eAAA,ECD1B,CAAA,MAAK,KAAK,OAAA,CAAA,CAAA,CDCuC;QAAC,CAAC,CAAC,CAAC;IPCtB;EAC3B,CAAA;ADDI,CAAC,CAAC;AU4BwB","file":"src/core/compiler/xhr/xhr_impl.js","sourceRoot":"/home/tonyo/projects/quickstart/node_modules/angular2/es6/prod/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","var $__placeholder__0 = $__export($__placeholder__1, $__placeholder__2);","function($__super) {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4, $__super);\n        }($__placeholder__5)","import {Promise, PromiseWrapper} from 'angular2/src/facade/async';\nimport {XHR} from './xhr';\n\nexport class XHRImpl extends XHR {\n  get(url: string): Promise<string> {\n    var completer = PromiseWrapper.completer();\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n    xhr.responseType = 'text';\n\n    xhr.onload = function() {\n      var status = xhr.status;\n      if (200 <= status && status <= 300) {\n        completer.resolve(xhr.responseText);\n      } else {\n        completer.reject(`Failed to load ${url}`);\n      }\n    };\n\n    xhr.onerror = function() {\n      completer.reject(`Failed to load ${url}`);\n    };\n\n    xhr.send();\n    return completer.promise;\n  }\n}\n","$traceurRuntime.superConstructor(\n          $__placeholder__0).apply(this, arguments)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.type.$__placeholder__0)","import {Promise,\n  PromiseWrapper} from 'angular2/src/facade/async';\nimport {XHR} from './xhr';\nexport class XHRImpl extends XHR {\n  get(url) {\n    var completer = PromiseWrapper.completer();\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n    xhr.responseType = 'text';\n    xhr.onload = function() {\n      var status = xhr.status;\n      if (200 <= status && status <= 300) {\n        completer.resolve(xhr.responseText);\n      } else {\n        completer.reject(`Failed to load ${url}`);\n      }\n    };\n    xhr.onerror = function() {\n      completer.reject(`Failed to load ${url}`);\n    };\n    xhr.send();\n    return completer.promise;\n  }\n}\nObject.defineProperty(XHRImpl.prototype.get, \"parameters\", {get: function() {\n    return [[assert.type.string]];\n  }});\n\n//# sourceMappingURL=/Users/tbosch/projects/angular2/modules/angular2/src/core/compiler/xhr/xhr_impl.map\n\n//# sourceMappingURL=./xhr_impl.map"]}