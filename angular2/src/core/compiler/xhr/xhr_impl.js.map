{"version":3,"sources":["xhr_impl.js"],"names":[],"mappings":"AAAA,KAAK,SAAS,AAAC,uDAAoB,UAAS,SAAQ;;;;;;;AAApD,OAAO;AACD,UAAM,GADZ,SAAS,IAAG,CAAG;AAAf,iBAAoB,KAAG,WAAkB,CAAC;IAElC,CAFR,UAAS,IAAG;AAAZ,cAAoB,KAAG,QAAkB,CAAC;AAA1C,qBAAoB,KAAG,eAAkB,CAAC;IAElC,CAFR,UAAS,IAAG,CAAG;AAAf,UAAoB,KAAG,IAAkB,CAAC;IAElC,CADuB;AACzB,UAAM;cAFY,CAAA,SAAQ,AAAC,aAAjC,SAAS,QAAO;AACN,AAAI,UAAA,UAGP,SAAM,QAAM;AAJnB,wBAAc,iBAAiB,AAAC,SACL,MAAM,AAAC,CAAC,IAAG,CAAG,UAAQ,CAAC,CAAA;;QAAA,AAuBlD,CAvBmD;AACzC,aAAO,CAAA,CAAC,eAAc,YAAY,CAAC,AAAC,WAG5C,GAAE,CAAF,UAAI,GAAE,CAAG;AACP,AAAI,cAAA,CAAA,SAAQ,EAAI,CAAA,cAAa,UAAU,AAAC,EAAC,CAAC;AAC1C,AAAI,cAAA,CAAA,GAAE,EAAI,IAAI,eAAa,AAAC,EAAC,CAAC;AAC9B,cAAE,KAAK,AAAC,CAAC,KAAI,CAAG,IAAE,CAAG,KAAG,CAAC,CAAC;AAC1B,cAAE,aAAa,EAAI,OAAK,CAAC;AACzB,cAAE,OAAO,EAAI,UAAQ,AAAC,CAAE;AACtB,AAAI,gBAAA,CAAA,MAAK,EAAI,CAAA,GAAE,OAAO,CAAC;AACvB,iBAAI,GAAE,GAAK,OAAK,CAAA,EAAK,CAAA,MAAK,GAAK,IAAE,CAAG;AAClC,wBAAQ,QAAQ,AAAC,CAAC,GAAE,aAAa,CAAC,CAAC;cACrC,KAAO;AACL,wBAAQ,OAAO,AAAC,EAAC,iBAAiB,EAAC,IAAE,EAAG,CAAC;cAC3C;AAAA,YACF,CAAC;AACD,cAAE,QAAQ,EAAI,UAAQ,AAAC,CAAE;AACvB,sBAAQ,OAAO,AAAC,EAAC,iBAAiB,EAAC,IAAE,EAAG,CAAC;YAC3C,CAAC;AACD,cAAE,KAAK,AAAC,EAAC,CAAC;AACV,iBAAO,CAAA,SAAQ,QAAQ,CAAC;UAC1B,MApBgE,SAAO,CAAC,CAAC;MACnE,AAAC,CAAoB,GAAE,CAAJ,EAJ2C;AAyBtE,WAAK,eAAe,AAAC,CAAC,OAAM,CAAG,cAAY,CAAG,EAAC,GAAE,CAAG,UAAQ,AAAC,CAAE;AAC3D,eAAO,EAAC,GAAI,WAAS,AAAC,EAAC,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;AACL,WAAK,eAAe,AAAC,CAAC,OAAM,UAAU,IAAI,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAQ,AAAC,CAAE;AACxE,eAAO,EAAC,CAAC,MAAK,KAAK,OAAO,CAAC,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;IA5B0B;EAC3B,CAAA;AADI,CAAC,CAAC;AA+BwB","file":"src/core/compiler/xhr/xhr_impl.js","sourceRoot":"/Users/justin/workspace/angular2_quckstart/quickstart/node_modules/angular2/es6/prod/","sourcesContent":["import {Injectable} from 'angular2/di';\nimport {Promise,\n  PromiseWrapper} from 'angular2/src/facade/async';\nimport {XHR} from './xhr';\nexport class XHRImpl extends XHR {\n  get(url) {\n    var completer = PromiseWrapper.completer();\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n    xhr.responseType = 'text';\n    xhr.onload = function() {\n      var status = xhr.status;\n      if (200 <= status && status <= 300) {\n        completer.resolve(xhr.responseText);\n      } else {\n        completer.reject(`Failed to load ${url}`);\n      }\n    };\n    xhr.onerror = function() {\n      completer.reject(`Failed to load ${url}`);\n    };\n    xhr.send();\n    return completer.promise;\n  }\n}\nObject.defineProperty(XHRImpl, \"annotations\", {get: function() {\n    return [new Injectable()];\n  }});\nObject.defineProperty(XHRImpl.prototype.get, \"parameters\", {get: function() {\n    return [[assert.type.string]];\n  }});\n//# sourceMappingURL=xhr_impl.es6.map\n\n//# sourceMappingURL=./xhr_impl.map"]}