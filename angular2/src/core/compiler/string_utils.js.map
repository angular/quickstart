{"version":3,"sources":["@traceur/generated/TemplateParser/5","src/core/compiler/string_utils.js","@traceur/generated/TemplateParser/13","@traceur/generated/TemplateParser/4","@traceur/generated/TemplateParser/3","@traceur/generated/TemplateParser/9","src/core/compiler/@traceur/generated/TemplateParser/24","src/core/compiler/@traceur/generated/TemplateParser/23"],"names":[],"mappings":"AAAA,KAAK,SAAS,AAAC,8BAAoB,UAAS,SAAQ;;;;;;ACK7C,SAAS,oBAAkB,CAAE,KAAI;AACtC,SAAO,CAAA,aAAY,iBAAiB,AAAE,CAAA,KAAI,CAAG,iBAAe,GAAI,SAAA,CAAA,CAAM;AACpE,WAAO,CAAA,CAAA,CAAE,CAAA,CAAC,YAAa,EAAC,CAAC;IAC3B,EAAC,CAAC;EACJ;AAEO,SAAS,oBAAkB,CAAE,KAAI;AACtC,SAAO,CAAA,aAAY,iBAAiB,AAAE,CAAA,KAAI,CAAG,kBAAgB,GAAI,SAAA,CAAA,CAAM;AACrE,WAAO,CAAA,GAAE,EAAI,CAAA,CAAA,CAAE,CAAA,CAAC,YAAY,AAAC,EAAC,CAAC;IACjC,EAAC,CAAC;EACJ;ACdQ,UAAQ,AAAC,4CAAqC,CAAA;AAA9C,UAAQ,AAAC,4CAAqC,CAAA;ACDtD,OAAO;AACD,UAAM,GCDZ,SAAS,IAAG;ACAZ,oBAAoB,KAAG,cAAkB,CAAC;AAA1C,oBAAoB,KAAG,cAAkB,CAAC;IDElC,CDDuB;AACzB,UAAM;uBFAW,CAAA,aAAY,OAAO,AAAE,CAAA,UAAS,CAAC;wBAC9B,CAAA,aAAY,OAAQ,AAAC,CAAA,SAAQ,CAAC;AKHtD,WAAK,eAAe,AAAC,CAAA,mBAAA,CAAA,aAAA,CACZ,EAAA,GAAE,CAAG,UAAS,AAAE,CAAA;AAAC,eAAA,ECD1B,CAAA,MAAK,KAAK,OAAA,CAAA,CAAA,CDCuC;QAAC,CAAC,CAAC,CAAC;AADrD,WAAK,eAAgB,CAAA,mBAAA,CAAA,aAAA,CACZ,EAAA,GAAE,CAAG,UAAQ,AAAG,CAAA;AAAC,eAAA,ECD1B,CAAA,MAAK,KAAK,OAAA,CAAA,CAAA,CDCuC;QAAC,CAAC,CAAC,CAAC;IHCtB;EAC3B,CAAA;AHDI,CAAC,CAAC;ACqB4B","file":"src/core/compiler/string_utils.js","sourceRoot":"/Users/deast/Angular/quickstart/node_modules/angular2/es6/prod/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","import {StringWrapper, RegExpWrapper} from 'angular2/src/facade/lang';\n\nvar DASH_CASE_REGEXP = RegExpWrapper.create('-([a-z])');\nvar CAMEL_CASE_REGEXP = RegExpWrapper.create('([A-Z])');\n\nexport function dashCaseToCamelCase(input:string): string {\n  return StringWrapper.replaceAllMapped(input, DASH_CASE_REGEXP, (m) => {\n    return m[1].toUpperCase();\n  });\n}\n\nexport function camelCaseToDashCase(input:string): string {\n  return StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, (m) => {\n    return '-' + m[1].toLowerCase();\n  });\n}\n","\n        $__export($__placeholder__0, $__placeholder__1)\n      ","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.type.$__placeholder__0)"]}