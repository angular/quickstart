{"version":3,"sources":["url_resolver.js"],"names":[],"mappings":"AAAA,KAAK,SAAS,AAAC,6EAAoB,UAAS,SAAQ;;;;;;;;;;AAApD,OAAO;AACD,UAAM,GADZ,SAAS,IAAG,CAAG;AAAf,iBAAoB,KAAG,WAAkB,CAAC;IAElC,CAFR,UAAS,IAAG;AAAZ,gBAAoB,KAAG,UAAkB,CAAC;AAA1C,cAAoB,KAAG,QAAkB,CAAC;AAA1C,oBAAoB,KAAG,cAAkB,CAAC;AAA1C,oBAAoB,KAAG,cAAkB,CAAC;IAElC,CAFR,UAAS,IAAG,CAAG;AAAf,UAAoB,KAAG,IAAkB,CAAC;IAElC,CADuB;AACzB,UAAM;kBAFY,CAAA,SAAQ,AAAC,iBAAjC,SAAQ,AAAC;AACC,AAAI,UAAA,cAKP,SAAM,YAAU,CACV,AAAC,CAAE;AACZ,aAAI,OAAM,AAAC,CAAC,WAAU,EAAE,CAAC,CAAG;AAC1B,sBAAU,EAAE,EAAI,CAAA,GAAE,cAAc,AAAC,CAAC,GAAE,CAAC,CAAC;UACxC;AAAA,QAT8C,AAUhD,CAViD;AACzC,aAAO,CAAA,CAAC,eAAc,YAAY,CAAC,AAAC,eAU5C,OAAM,CAAN,UAAQ,OAAM,CAAG,CAAA,GAAE,CAAG;AACpB,eAAI,OAAM,AAAC,CAAC,OAAM,CAAC,CAAG;AACpB,gBAAE,kBAAkB,AAAC,CAAC,WAAU,EAAE,CAAG,IAAE,CAAG,KAAG,CAAC,CAAC;AAC/C,mBAAO,CAAA,GAAE,QAAQ,AAAC,CAAC,WAAU,EAAE,CAAC,CAAC;YACnC;AAAA,AACA,eAAI,OAAM,AAAC,CAAC,GAAE,CAAC,CAAA,EAAK,CAAA,GAAE,GAAK,GAAC;AAC1B,mBAAO,QAAM,CAAC;AAAA,AAChB,eAAI,GAAE,CAAE,CAAA,CAAC,GAAK,IAAE,CAAG;AACjB,kBAAM,IAAI,cAAY,AAAC,EAAC,4BAA4B,EAAC,IAAE,EAAC,SAAQ,EAAC,QAAM,EAAG,CAAC;YAC7E;AAAA,AACI,cAAA,CAAA,CAAA,EAAI,CAAA,aAAY,WAAW,AAAC,CAAC,SAAQ,CAAG,IAAE,CAAC,CAAC;AAChD,eAAI,SAAQ,AAAC,CAAC,CAAA,CAAE,CAAA,CAAC,CAAC,CAAG;AACnB,mBAAO,IAAE,CAAC;YACZ;AAAA,AACA,cAAE,kBAAkB,AAAC,CAAC,WAAU,EAAE,CAAG,QAAM,CAAG,IAAE,CAAC,CAAC;AAClD,iBAAO,CAAA,GAAE,QAAQ,AAAC,CAAC,WAAU,EAAE,CAAC,CAAC;UACnC,MAzB8D,CAAC;MACzD,AAAC,EAAC,EAJ4D;AA8BtE,WAAK,eAAe,AAAC,CAAC,WAAU,CAAG,cAAY,CAAG,EAAC,GAAE,CAAG,UAAQ,AAAC,CAAE;AAC/D,eAAO,EAAC,GAAI,WAAS,AAAC,EAAC,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;AACL,WAAK,eAAe,AAAC,CAAC,WAAU,UAAU,QAAQ,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAQ,AAAC,CAAE;AAChF,eAAO,EAAC,CAAC,MAAK,KAAK,OAAO,CAAC,CAAG,EAAC,MAAK,KAAK,OAAO,CAAC,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;gBACW,CAAA,aAAY,OAAO,AAAC,CAAC,eAAc,CAAC;IAlCrB;EAC3B,CAAA;AADI,CAAC,CAAC;AAqC4B","file":"src/core/compiler/url_resolver.js","sourceRoot":"/Users/justin/workspace/angular2_quckstart/quickstart/node_modules/angular2/es6/prod/","sourcesContent":["import {Injectable} from 'angular2/di';\nimport {isPresent,\n  isBlank,\n  RegExpWrapper,\n  BaseException} from 'angular2/src/facade/lang';\nimport {DOM} from 'angular2/src/dom/dom_adapter';\nexport class UrlResolver {\n  constructor() {\n    if (isBlank(UrlResolver.a)) {\n      UrlResolver.a = DOM.createElement('a');\n    }\n  }\n  resolve(baseUrl, url) {\n    if (isBlank(baseUrl)) {\n      DOM.resolveAndSetHref(UrlResolver.a, url, null);\n      return DOM.getHref(UrlResolver.a);\n    }\n    if (isBlank(url) || url == '')\n      return baseUrl;\n    if (url[0] == '/') {\n      throw new BaseException(`Could not resolve the url ${url} from ${baseUrl}`);\n    }\n    var m = RegExpWrapper.firstMatch(_schemeRe, url);\n    if (isPresent(m[1])) {\n      return url;\n    }\n    DOM.resolveAndSetHref(UrlResolver.a, baseUrl, url);\n    return DOM.getHref(UrlResolver.a);\n  }\n}\nObject.defineProperty(UrlResolver, \"annotations\", {get: function() {\n    return [new Injectable()];\n  }});\nObject.defineProperty(UrlResolver.prototype.resolve, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string]];\n  }});\nvar _schemeRe = RegExpWrapper.create('^([^:/?#]+:)?');\n//# sourceMappingURL=url_resolver.js.map\n\n//# sourceMappingURL=./url_resolver.map"]}