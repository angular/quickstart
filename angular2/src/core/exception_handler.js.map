{"version":3,"sources":["@traceur/generated/TemplateParser/5","@traceur/generated/TemplateParser/4","@traceur/generated/TemplateParser/3","@traceur/generated/TemplateParser/9","@traceur/generated/TemplateParser/6","@traceur/generated/TemplateParser/10","src/core/exception_handler.js"],"names":[],"mappings":"AAAA,KAAK,SAAS,AAAC,gEAAoB,UAAS,SAAQ;;;;;;;ACApD,OAAO;AACD,UAAM,GCDZ,SAAS,IAAG;ACAZ,gBAAoB,KAAG,UAAkB,CAAC;AAA1C,YAAoB,KAAG,MAAkB,CAAC;IDElC,CAFR,UAAS,IAAG;ACAZ,kBAAoB,KAAG,YAAkB,CAAC;AAA1C,yBAAoB,KAAG,mBAAkB,CAAC;IDElC,CDDuB;AACzB,UAAM;uBGFY,CAAA,SAAQ,AAAC,sBCAjC,SAAQ,AAAC;AACC,AAAI,UAAA,mBCEP,SAAM,iBAAe,KDFsB,ACQlD,CDRmD;AACzC,aAAO,CAAA,CAAC,eAAc,YAAY,CAAC,AAAC,oBCE5C,IAAG,CAAH,UAAK,KAAI,AAAkC,CAAG;cAAlC,WAAS,6CAAI,KAAG;cAAG,OAAK,6CAAI,KAAG;AACrC,cAAA,CAAA,cAAa,EAAI,CAAA,kBAAkB,AAAC,CAAA,UAAS,CAAC,CAAA,CAAI,CAAA,WAAU,KAAK,AAAE,CAAA,UAAS,CAAG,OAAK,CAAC,CAAA,CAAI,WAAS,CAAC;AACnG,cAAA,CAAA,SAAQ,EAAI,CAAA,SAAQ,AAAE,CAAA,MAAK,CAAC,CAAA,GAAI,IAAK,EAAA,OAAK,GAAM,GAAC,CAAC;AACtD,gBAAK,AAAC,EAAA,EAAG,EAAA,MAAI,EAAI,UAAQ,EAAA,kBAAmB,EAAA,eAAa,EAAG,CAAC;UAC/D,MDL8D,CAAC;MACzD,AAAC,EAAC,EDJ4D;IHEvC;EAC3B,CAAA;ADDI,CAAC,CAAC;AMYiC","file":"src/core/exception_handler.js","sourceRoot":"/home/tonyo/projects/quickstart/node_modules/angular2/es6/prod/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","var $__placeholder__0 = $__export($__placeholder__1, $__placeholder__2);","function() {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4);\n        }()","import {isPresent, print} from 'angular2/src/facade/lang';\nimport {ListWrapper, isListLikeIterable} from 'angular2/src/facade/collection';\n\nexport class ExceptionHandler {\n  call(error, stackTrace = null, reason = null) {\n    var longStackTrace = isListLikeIterable(stackTrace) ? ListWrapper.join(stackTrace, \"\\n\\n\") : stackTrace;\n    var reasonStr = isPresent(reason) ? `\\n${reason}` : '';\n    print(`${error}${reasonStr}\\nSTACKTRACE:\\n${longStackTrace}`);\n  }\n}\n"]}