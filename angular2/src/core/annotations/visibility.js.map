{"version":3,"sources":["@traceur/generated/TemplateParser/5","@traceur/generated/TemplateParser/4","@traceur/generated/TemplateParser/3","@traceur/generated/TemplateParser/9","@traceur/generated/TemplateParser/6","@traceur/generated/TemplateParser/12","src/core/annotations/visibility.js","@traceur/generated/TemplateParser/11","src/core/annotations/@traceur/generated/TemplateParser/24"],"names":[],"mappings":"AAAA,KAAK,SAAS,AAAC,6CAAoB,UAAS,SAAQ;;;;;;ACApD,OAAO;AACD,UAAM,GCDZ,SAAS,IAAG,CAAG;ACAf,YAAoB,KAAG,MAAkB,CAAC;IDElC,CAFR,UAAS,IAAG,CAAG;ACAf,2BAAoB,KAAG,qBAAkB,CAAC;IDElC,CDDuB;AACzB,UAAM;aGFY,CAAA,SAAQ,AAAC,YCAjC,SAAS,QAAO,CAAG;AACT,AAAI,UAAA,SC2CP,SAAM,OAAK,CAEL,AAAG,CAAA;AC9ChB,AD+CI,wBC/CU,iBAAiB,AAAC,QAAkB,KAAK,MAAmB,CD+C/D;QD9CuC,AC+ChD,CD/CiD;AACzC,aAAO,CAAA,CAAC,eAAc,YAAY,CAAC,AAAC,gBACoB,SAAO,CAAC,CAAC;MACnE,AAAC,CCwCmB,oBAAmB,CDxCpB,EDJ2C;AEiDtE,WEjDK,eAAgB,CAAA,MAAA,CAAA,cAAA,CACZ,EAAA,GAAE,CAAG,UAAS,AAAE,CAAA;AAAC,eAAA,EAAA,GF4CvB,MAAI,AAAC,EAAC,CAAA,CE5CwC;QAAC,CAAC,CAAC,CAAC;eJD7B,CAAA,SAAQ,AAAC,cCAjC,SAAS,QAAO,CAAG;AACT,AAAI,UAAA,WCwGP,SAAM,SAAO,CAEN,AAAE,CAAA;AC3GhB,AD4GI,wBC5GU,iBAAiB,AAAC,UAAkB,KAAK,MAAmB,CD4G/D;QD3GuC,AC4GhD,CD5GiD;AACzC,aAAO,CAAA,CAAC,eAAc,YAAY,CAAC,AAAC,kBACoB,SAAO,CAAC,CAAC;MACnE,AAAC,CCqGqB,oBAAmB,CDrGtB,EDJ2C;AIAtE,WAAK,eAAe,AAAC,CAAA,QAAA,CAAA,cAAA,CACZ,EAAA,GAAE,CAAG,UAAS,AAAE,CAAA;AAAC,eAAA,EAAA,GFyGvB,MAAI,AAAC,EAAC,CAAA,CEzGwC;QAAC,CAAC,CAAC,CAAC;IPCtB;EAC3B,CAAA;ADDI,CAAC,CAAC;AMmB0B","file":"src/core/annotations/visibility.js","sourceRoot":"/Users/deast/Angular/quickstart/node_modules/angular2/es6/prod/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","var $__placeholder__0 = $__export($__placeholder__1, $__placeholder__2);","function($__super) {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4, $__super);\n        }($__placeholder__5)","import {CONST} from 'angular2/src/facade/lang';\nimport {DependencyAnnotation} from 'angular2/di';\n\n/**\n * Specifies that an injector should retrieve a dependency from the direct parent.\n * \n * ## Example\n * \n * Here is a simple directive that retrieves a dependency from its parent element.\n * \n * ```\n * @Decorator({\n *   selector: '[dependency]',\n *   bind: {\n *     'id':'dependency'\n *   }\n * })\n * class Dependency {\n *   id:string;\n * }\n * \n * \n * @Decorator({\n *   selector: '[my-directive]'\n * })\n * class Dependency {\n *   constructor(@Parent() dependency:Dependency) {\n *     expect(dependency.id).toEqual(1);\n *   };\n * }\n * ```\n * \n * We use this with the following HTML template:\n * \n * ```\n * <div dependency=\"1\">\n *   <div dependency=\"2\" my-directive></div>\n * </div>\n * ```\n * The `@Parent()` annotation in our constructor forces the injector to retrieve the dependency from the\n * parent element (even thought the current element could resolve it): Angular injects `dependency=1`.\n *\n * @publicModule angular2/annotations\n */\nexport class Parent extends DependencyAnnotation {\n  @CONST()\n  constructor() {\n    super();\n  }\n}\n\n/**\n * Specifies that an injector should retrieve a dependency from any ancestor element.\n * \n * An ancestor is any element between the parent element and shadow root.\n *\n * \n * ## Example\n * \n * Here is a simple directive that retrieves a dependency from an ancestor element.\n * \n * ```\n * @Decorator({\n *   selector: '[dependency]',\n *   bind: {\n *     'id':'dependency'\n *   }\n * })\n * class Dependency {\n *   id:string;\n * }\n * \n * \n * @Decorator({\n *   selector: '[my-directive]'\n * })\n * class Dependency {\n *   constructor(@Ancestor() dependency:Dependency) {\n *     expect(dependency.id).toEqual(2);\n *   };\n * }\n * ```\n *\n *  We use this with the following HTML template:\n * \n * ```\n * <div dependency=\"1\">\n *   <div dependency=\"2\">\n *     <div>\n *       <div dependency=\"3\" my-directive></div>\n *     </div>\n *   </div>\n * </div>\n * ```\n * \n * The `@Ancestor()` annotation in our constructor forces the injector to retrieve the dependency from the\n * nearest ancestor element: \n * - The current element `dependency=\"3\"` is skipped because it is not an ancestor.\n * - Next parent has no directives `<div>`\n * - Next parent has the `Dependency` directive and so the dependency is satisfied. \n * \n * Angular injects `dependency=2`.\n *\n * @publicModule angular2/annotations\n */\nexport class Ancestor extends DependencyAnnotation {\n  @CONST()\n  constructor() {\n    super();\n  }\n}\n","$traceurRuntime.superConstructor($__placeholder__0).call($__placeholder__1)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});"]}