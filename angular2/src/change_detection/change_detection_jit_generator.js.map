{"version":3,"sources":["@traceur/generated/TemplateParser/5","src/change_detection/change_detection_jit_generator.es6","src/change_detection/@traceur/generated/TemplateParser/24","src/change_detection/@traceur/generated/TemplateParser/23","src/change_detection/change_detection_jit_generator.js","@traceur/generated/TemplateParser/4","@traceur/generated/TemplateParser/3","@traceur/generated/TemplateParser/9","@traceur/generated/TemplateParser/6","@traceur/generated/TemplateParser/10","src/change_detection/@traceur/generated/TemplateParser/37"],"names":[],"mappings":"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","file":"src/change_detection/change_detection_jit_generator.js","sourceRoot":"/Users/deast/Angular/quickstart/node_modules/angular2/es6/prod/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","import {isPresent, isBlank, BaseException, Type} from 'angular2/src/facade/lang';\nimport {List, ListWrapper, MapWrapper, StringMapWrapper} from 'angular2/src/facade/collection';\n\nimport {AbstractChangeDetector} from './abstract_change_detector';\nimport {ChangeDetectionUtil} from './change_detection_util';\n\nimport {\n  ProtoRecord,\n  RECORD_TYPE_SELF,\n  RECORD_TYPE_PROPERTY,\n  RECORD_TYPE_LOCAL,\n  RECORD_TYPE_INVOKE_METHOD,\n  RECORD_TYPE_CONST,\n  RECORD_TYPE_INVOKE_CLOSURE,\n  RECORD_TYPE_PRIMITIVE_OP,\n  RECORD_TYPE_KEYED_ACCESS,\n  RECORD_TYPE_PIPE,\n  RECORD_TYPE_INTERPOLATE\n  } from './proto_record';\n\n/**\n * The code generator takes a list of proto records and creates a function/class\n * that \"emulates\" what the developer would write by hand to implement the same\n * kind of behaviour.\n *\n * For example: An expression `address.city` will result in the following class:\n *\n * var ChangeDetector0 = function ChangeDetector0(dispatcher, protos) {\n *   AbstractChangeDetector.call(this);\n *   this.dispatcher = dispatcher;\n *   this.protos = protos;\n *\n *   this.context = ChangeDetectionUtil.unitialized();\n *   this.address0 = ChangeDetectionUtil.unitialized();\n *   this.city1 = ChangeDetectionUtil.unitialized();\n * }\n * ChangeDetector0.prototype = Object.create(AbstractChangeDetector.prototype);\n *\n * ChangeDetector0.prototype.detectChangesInRecords = function(throwOnChange) {\n *   var address0;\n *   var city1;\n *   var change;\n *   var changes = null;\n *   var temp;\n *   var context = this.context;\n *\n *   address0 = context.address;\n *   if (address0 !== this.address0) {\n *     this.address0 = address0;\n *   }\n *\n *   city1 = address0.city;\n *   if (city1 !== this.city1) {\n *     changes = ChangeDetectionUtil.addRecord(changes,\n *       ChangeDetectionUtil.simpleChangeRecord(this.protos[1].bindingMemento, this.city1, city1));\n *     this.city1 = city1;\n *   }\n *\n *   if (changes.length > 0) {\n *     if(throwOnChange) ChangeDetectionUtil.throwOnChange(this.protos[1], changes[0]);\n *     this.dispatcher.onRecordChange('address.city', changes);\n *     changes = null;\n *   }\n * }\n *\n *\n * ChangeDetector0.prototype.hydrate = function(context, locals) {\n *   this.context = context;\n *   this.locals = locals;\n * }\n *\n * ChangeDetector0.prototype.dehydrate = function(context) {\n *   this.context = ChangeDetectionUtil.unitialized();\n *   this.address0 = ChangeDetectionUtil.unitialized();\n *   this.city1 = ChangeDetectionUtil.unitialized();\n *   this.locals = null;\n * }\n *\n * ChangeDetector0.prototype.hydrated = function() {\n *   return this.context !== ChangeDetectionUtil.unitialized();\n * }\n *\n * return ChangeDetector0;\n *\n *\n * The only thing the generated class depends on is the super class AbstractChangeDetector.\n *\n * The implementation comprises two parts:\n * * ChangeDetectorJITGenerator has the logic of how everything fits together.\n * * template functions (e.g., constructorTemplate) define what code is generated.\n*/\n\nvar ABSTRACT_CHANGE_DETECTOR = \"AbstractChangeDetector\";\nvar UTIL = \"ChangeDetectionUtil\";\nvar DISPATCHER_ACCESSOR = \"this.dispatcher\";\nvar PIPE_REGISTRY_ACCESSOR = \"this.pipeRegistry\";\nvar PROTOS_ACCESSOR = \"this.protos\";\nvar CONTEXT_ACCESSOR = \"this.context\";\nvar CHANGE_LOCAL = \"change\";\nvar CHANGES_LOCAL = \"changes\";\nvar LOCALS_ACCESSOR = \"this.locals\";\nvar TEMP_LOCAL = \"temp\";\n\nfunction typeTemplate(type:string, cons:string, detectChanges:string, setContext:string):string {\n  return `\n${cons}\n${detectChanges}\n${setContext};\n\nreturn function(dispatcher, pipeRegistry) {\n  return new ${type}(dispatcher, pipeRegistry, protos);\n}\n`;\n}\n\nfunction constructorTemplate(type:string, fieldsDefinitions:string):string {\n  return `\nvar ${type} = function ${type}(dispatcher, pipeRegistry, protos) {\n${ABSTRACT_CHANGE_DETECTOR}.call(this);\n${DISPATCHER_ACCESSOR} = dispatcher;\n${PIPE_REGISTRY_ACCESSOR} = pipeRegistry;\n${PROTOS_ACCESSOR} = protos;\n${fieldsDefinitions}\n}\n\n${type}.prototype = Object.create(${ABSTRACT_CHANGE_DETECTOR}.prototype);\n`;\n}\n\nfunction pipeOnDestroyTemplate(pipeNames:List) {\n  return pipeNames.map((p) => `${p}.onDestroy()`).join(\"\\n\");\n}\n\nfunction hydrateTemplate(type:string, fieldsDefinitions:string, pipeOnDestroy:string):string {\n  return `\n${type}.prototype.hydrate = function(context, locals) {\n  ${CONTEXT_ACCESSOR} = context;\n  ${LOCALS_ACCESSOR} = locals;\n}\n${type}.prototype.dehydrate = function() {\n  ${pipeOnDestroy}\n  ${fieldsDefinitions}\n  ${LOCALS_ACCESSOR} = null;\n}\n${type}.prototype.hydrated = function() {\n  return ${CONTEXT_ACCESSOR} !== ${UTIL}.unitialized();\n}\n`;\n}\n\nfunction detectChangesTemplate(type:string, body:string):string {\n  return `\n${type}.prototype.detectChangesInRecords = function(throwOnChange) {\n  ${body}\n}\n`;\n}\n\n\nfunction bodyTemplate(localDefinitions:string, changeDefinitions:string, records:string):string {\n  return `\n${localDefinitions}\n${changeDefinitions}\nvar ${TEMP_LOCAL};\nvar ${CHANGE_LOCAL};\nvar ${CHANGES_LOCAL} = null;\n\ncontext = ${CONTEXT_ACCESSOR};\n${records}\n`;\n}\n\nfunction notifyTemplate(index:number):string{\n  return  `\nif (${CHANGES_LOCAL} && ${CHANGES_LOCAL}.length > 0) {\n  if(throwOnChange) ${UTIL}.throwOnChange(${PROTOS_ACCESSOR}[${index}], ${CHANGES_LOCAL}[0]);\n  ${DISPATCHER_ACCESSOR}.onRecordChange(${PROTOS_ACCESSOR}[${index}].directiveMemento, ${CHANGES_LOCAL});\n  ${CHANGES_LOCAL} = null;\n}\n`;\n}\n\nfunction pipeCheckTemplate(context:string, pipe:string, pipeType:string,\n                                  value:string, change:string, addRecord:string, notify:string):string{\n  return `\nif (${pipe} === ${UTIL}.unitialized()) {\n  ${pipe} = ${PIPE_REGISTRY_ACCESSOR}.get('${pipeType}', ${context});\n} else if (!${pipe}.supports(${context})) {\n  ${pipe}.onDestroy();\n  ${pipe} = ${PIPE_REGISTRY_ACCESSOR}.get('${pipeType}', ${context});\n}\n\n${CHANGE_LOCAL} = ${pipe}.transform(${context});\nif (! ${UTIL}.noChangeMarker(${CHANGE_LOCAL})) {\n  ${value} = ${CHANGE_LOCAL};\n  ${change} = true;\n  ${addRecord}\n}\n${notify}\n`;\n}\n\nfunction referenceCheckTemplate(assignment, newValue, oldValue, change, addRecord, notify) {\n  return `\n${assignment}\nif (${newValue} !== ${oldValue} || (${newValue} !== ${newValue}) && (${oldValue} !== ${oldValue})) {\n  ${change} = true;\n  ${addRecord}\n  ${oldValue} = ${newValue};\n}\n${notify}\n`;\n}\n\nfunction assignmentTemplate(field:string, value:string) {\n  return `${field} = ${value};`;\n}\n\nfunction localDefinitionsTemplate(names:List):string {\n  return names.map((n) => `var ${n};`).join(\"\\n\");\n}\n\nfunction changeDefinitionsTemplate(names:List):string {\n  return names.map((n) => `var ${n} = false;`).join(\"\\n\");\n}\n\nfunction fieldDefinitionsTemplate(names:List):string {\n  return names.map((n) => `${n} = ${UTIL}.unitialized();`).join(\"\\n\");\n}\n\nfunction ifChangedGuardTemplate(changeNames:List, body:string):string {\n  var cond = changeNames.join(\" || \");\n  return `\nif (${cond}) {\n  ${body}\n}\n`;\n}\n\nfunction addSimpleChangeRecordTemplate(protoIndex:number, oldValue:string, newValue:string) {\n  return `${CHANGES_LOCAL} = ${UTIL}.addRecord(${CHANGES_LOCAL},\n    ${UTIL}.simpleChangeRecord(${PROTOS_ACCESSOR}[${protoIndex}].bindingMemento, ${oldValue}, ${newValue}));`;\n}\n\n\nexport class ChangeDetectorJITGenerator {\n  typeName:string;\n  records:List<ProtoRecord>;\n  localNames:List<String>;\n  changeNames:List<String>;\n  fieldNames:List<String>;\n  pipeNames:List<String>;\n\n  constructor(typeName:string, records:List<ProtoRecord>) {\n    this.typeName = typeName;\n    this.records = records;\n\n    this.localNames = this.getLocalNames(records);\n    this.changeNames = this.getChangeNames(this.localNames);\n    this.fieldNames = this.getFieldNames(this.localNames);\n    this.pipeNames = this.getPipeNames(this.localNames);\n  }\n\n  getLocalNames(records:List<ProtoRecord>):List<String> {\n    var index = 0;\n    var names = records.map((r) => {\n      var sanitizedName = r.name.replace(new RegExp(\"\\\\W\", \"g\"), '');\n      return `${sanitizedName}${index++}`\n    });\n    return [\"context\"].concat(names);\n  }\n\n  getChangeNames(localNames:List<String>):List<String> {\n    return localNames.map((n) => `change_${n}`);\n  }\n\n  getFieldNames(localNames:List<String>):List<String> {\n    return localNames.map((n) => `this.${n}`);\n  }\n\n  getPipeNames(localNames:List<String>):List<String> {\n    return localNames.map((n) => `this.${n}_pipe`);\n  }\n\n  generate():Function {\n    var text = typeTemplate(this.typeName, this.genConstructor(), this.genDetectChanges(), this.genHydrate());\n    return new Function('AbstractChangeDetector', 'ChangeDetectionUtil', 'protos', text)(AbstractChangeDetector, ChangeDetectionUtil, this.records);\n  }\n\n  genConstructor():string {\n    return constructorTemplate(this.typeName, this.genFieldDefinitions());\n  }\n\n  genHydrate():string {\n    return hydrateTemplate(this.typeName, this.genFieldDefinitions(),\n      pipeOnDestroyTemplate(this.getnonNullPipeNames()));\n  }\n\n  genFieldDefinitions() {\n    var fields = [];\n    fields = fields.concat(this.fieldNames);\n    fields = fields.concat(this.getnonNullPipeNames());\n    return fieldDefinitionsTemplate(fields);\n  }\n\n  getnonNullPipeNames():List<String> {\n    var pipes = [];\n    this.records.forEach((r) => {\n      if (r.mode === RECORD_TYPE_PIPE) {\n        pipes.push(this.pipeNames[r.selfIndex]);\n      }\n    });\n    return pipes;\n  }\n\n  genDetectChanges():string {\n    var body = this.genBody();\n    return detectChangesTemplate(this.typeName, body);\n  }\n\n  genBody():string {\n    var rec = this.records.map((r) => this.genRecord(r)).join(\"\\n\");\n    return bodyTemplate(this.genLocalDefinitions(), this.genChangeDefinitions(), rec);\n  }\n\n  genLocalDefinitions():string {\n    return localDefinitionsTemplate(this.localNames);\n  }\n\n  genChangeDefinitions():string {\n    return changeDefinitionsTemplate(this.changeNames);\n  }\n\n  genRecord(r:ProtoRecord):string {\n    if (r.mode === RECORD_TYPE_PIPE) {\n      return this.genPipeCheck (r);\n    } else {\n      return this.genReferenceCheck(r);\n    }\n  }\n\n  genPipeCheck(r:ProtoRecord):string {\n    var context = this.localNames[r.contextIndex];\n    var pipe = this.pipeNames[r.selfIndex];\n    var newValue = this.localNames[r.selfIndex];\n    var oldValue = this.fieldNames[r.selfIndex];\n    var change = this.changeNames[r.selfIndex];\n\n    var addRecord = addSimpleChangeRecordTemplate(r.selfIndex - 1, oldValue, newValue);\n    var notify = this.genNotify(r);\n\n    return pipeCheckTemplate(context, pipe, r.name, newValue, change, addRecord, notify);\n  }\n\n  genReferenceCheck(r:ProtoRecord):string {\n    var newValue = this.localNames[r.selfIndex];\n    var oldValue = this.fieldNames[r.selfIndex];\n    var change = this.changeNames[r.selfIndex];\n    var assignment = this.genUpdateCurrentValue(r);\n    var addRecord = addSimpleChangeRecordTemplate(r.selfIndex - 1, oldValue, newValue);\n    var notify = this.genNotify(r);\n\n    var check = referenceCheckTemplate(assignment, newValue, oldValue, change, r.lastInBinding ? addRecord : '', notify);\n    if (r.isPureFunction()) {\n      return this.ifChangedGuard(r, check);\n    } else {\n      return check;\n    }\n  }\n\n  genUpdateCurrentValue(r:ProtoRecord):string {\n    var context = this.localNames[r.contextIndex];\n    var newValue = this.localNames[r.selfIndex];\n    var args = this.genArgs(r);\n\n    switch (r.mode) {\n      case RECORD_TYPE_SELF:\n        return assignmentTemplate(newValue, context);\n\n      case RECORD_TYPE_CONST:\n        return `${newValue} = ${this.genLiteral(r.funcOrValue)}`;\n\n      case RECORD_TYPE_PROPERTY:\n        return assignmentTemplate(newValue, `${context}.${r.name}`);\n\n      case RECORD_TYPE_LOCAL:\n        return assignmentTemplate(newValue, `${LOCALS_ACCESSOR}.get('${r.name}')`);\n\n      case RECORD_TYPE_INVOKE_METHOD:\n        return assignmentTemplate(newValue, `${context}.${r.name}(${args})`);\n\n      case RECORD_TYPE_INVOKE_CLOSURE:\n        return assignmentTemplate(newValue, `${context}(${args})`);\n\n      case RECORD_TYPE_PRIMITIVE_OP:\n        return assignmentTemplate(newValue, `${UTIL}.${r.name}(${args})`);\n\n      case RECORD_TYPE_INTERPOLATE:\n        return assignmentTemplate(newValue, this.genInterpolation(r));\n\n      case RECORD_TYPE_KEYED_ACCESS:\n        var key = this.localNames[r.args[0]];\n        return assignmentTemplate(newValue, `${context}[${key}]`);\n\n      default:\n        throw new BaseException(`Unknown operation ${r.mode}`);\n    }\n  }\n\n  ifChangedGuard(r:ProtoRecord, body:string):string {\n    return ifChangedGuardTemplate(r.args.map((a) => this.changeNames[a]), body);\n  }\n\n  genInterpolation(r:ProtoRecord):string{\n    var res = \"\";\n    for (var i = 0; i < r.args.length; ++i) {\n      res += this.genLiteral(r.fixedArgs[i]);\n      res += \" + \";\n      res += this.localNames[r.args[i]];\n      res += \" + \";\n    }\n    res += this.genLiteral(r.fixedArgs[r.args.length]);\n    return res;\n  }\n\n  genLiteral(value):string {\n    return JSON.stringify(value);\n  }\n\n  genNotify(r):string{\n    return r.lastInDirective ? notifyTemplate(r.selfIndex - 1) : '';\n  }\n\n  genArgs(r:ProtoRecord):string {\n    return r.args.map((arg) => this.localNames[arg]).join(\", \");\n  }\n}\n\n\n\n\n","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.type.$__placeholder__0)","import {isPresent,\n  isBlank,\n  BaseException,\n  Type} from 'angular2/src/facade/lang';\nimport {List,\n  ListWrapper,\n  MapWrapper,\n  StringMapWrapper} from 'angular2/src/facade/collection';\nimport {AbstractChangeDetector} from './abstract_change_detector';\nimport {ChangeDetectionUtil} from './change_detection_util';\nimport {ProtoRecord,\n  RECORD_TYPE_SELF,\n  RECORD_TYPE_PROPERTY,\n  RECORD_TYPE_LOCAL,\n  RECORD_TYPE_INVOKE_METHOD,\n  RECORD_TYPE_CONST,\n  RECORD_TYPE_INVOKE_CLOSURE,\n  RECORD_TYPE_PRIMITIVE_OP,\n  RECORD_TYPE_KEYED_ACCESS,\n  RECORD_TYPE_PIPE,\n  RECORD_TYPE_INTERPOLATE} from './proto_record';\nvar ABSTRACT_CHANGE_DETECTOR = \"AbstractChangeDetector\";\nvar UTIL = \"ChangeDetectionUtil\";\nvar DISPATCHER_ACCESSOR = \"this.dispatcher\";\nvar PIPE_REGISTRY_ACCESSOR = \"this.pipeRegistry\";\nvar PROTOS_ACCESSOR = \"this.protos\";\nvar CONTEXT_ACCESSOR = \"this.context\";\nvar CHANGE_LOCAL = \"change\";\nvar CHANGES_LOCAL = \"changes\";\nvar LOCALS_ACCESSOR = \"this.locals\";\nvar TEMP_LOCAL = \"temp\";\nfunction typeTemplate(type, cons, detectChanges, setContext) {\n  return `\n${cons}\n${detectChanges}\n${setContext};\n\nreturn function(dispatcher, pipeRegistry) {\n  return new ${type}(dispatcher, pipeRegistry, protos);\n}\n`;\n}\nObject.defineProperty(typeTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string], [assert.type.string], [assert.type.string]];\n  }});\nfunction constructorTemplate(type, fieldsDefinitions) {\n  return `\nvar ${type} = function ${type}(dispatcher, pipeRegistry, protos) {\n${ABSTRACT_CHANGE_DETECTOR}.call(this);\n${DISPATCHER_ACCESSOR} = dispatcher;\n${PIPE_REGISTRY_ACCESSOR} = pipeRegistry;\n${PROTOS_ACCESSOR} = protos;\n${fieldsDefinitions}\n}\n\n${type}.prototype = Object.create(${ABSTRACT_CHANGE_DETECTOR}.prototype);\n`;\n}\nObject.defineProperty(constructorTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string]];\n  }});\nfunction pipeOnDestroyTemplate(pipeNames) {\n  return pipeNames.map((p) => `${p}.onDestroy()`).join(\"\\n\");\n}\nObject.defineProperty(pipeOnDestroyTemplate, \"parameters\", {get: function() {\n    return [[List]];\n  }});\nfunction hydrateTemplate(type, fieldsDefinitions, pipeOnDestroy) {\n  return `\n${type}.prototype.hydrate = function(context, locals) {\n  ${CONTEXT_ACCESSOR} = context;\n  ${LOCALS_ACCESSOR} = locals;\n}\n${type}.prototype.dehydrate = function() {\n  ${pipeOnDestroy}\n  ${fieldsDefinitions}\n  ${LOCALS_ACCESSOR} = null;\n}\n${type}.prototype.hydrated = function() {\n  return ${CONTEXT_ACCESSOR} !== ${UTIL}.unitialized();\n}\n`;\n}\nObject.defineProperty(hydrateTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string], [assert.type.string]];\n  }});\nfunction detectChangesTemplate(type, body) {\n  return `\n${type}.prototype.detectChangesInRecords = function(throwOnChange) {\n  ${body}\n}\n`;\n}\nObject.defineProperty(detectChangesTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string]];\n  }});\nfunction bodyTemplate(localDefinitions, changeDefinitions, records) {\n  return `\n${localDefinitions}\n${changeDefinitions}\nvar ${TEMP_LOCAL};\nvar ${CHANGE_LOCAL};\nvar ${CHANGES_LOCAL} = null;\n\ncontext = ${CONTEXT_ACCESSOR};\n${records}\n`;\n}\nObject.defineProperty(bodyTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string], [assert.type.string]];\n  }});\nfunction notifyTemplate(index) {\n  return `\nif (${CHANGES_LOCAL} && ${CHANGES_LOCAL}.length > 0) {\n  if(throwOnChange) ${UTIL}.throwOnChange(${PROTOS_ACCESSOR}[${index}], ${CHANGES_LOCAL}[0]);\n  ${DISPATCHER_ACCESSOR}.onRecordChange(${PROTOS_ACCESSOR}[${index}].directiveMemento, ${CHANGES_LOCAL});\n  ${CHANGES_LOCAL} = null;\n}\n`;\n}\nObject.defineProperty(notifyTemplate, \"parameters\", {get: function() {\n    return [[assert.type.number]];\n  }});\nfunction pipeCheckTemplate(context, pipe, pipeType, value, change, addRecord, notify) {\n  return `\nif (${pipe} === ${UTIL}.unitialized()) {\n  ${pipe} = ${PIPE_REGISTRY_ACCESSOR}.get('${pipeType}', ${context});\n} else if (!${pipe}.supports(${context})) {\n  ${pipe}.onDestroy();\n  ${pipe} = ${PIPE_REGISTRY_ACCESSOR}.get('${pipeType}', ${context});\n}\n\n${CHANGE_LOCAL} = ${pipe}.transform(${context});\nif (! ${UTIL}.noChangeMarker(${CHANGE_LOCAL})) {\n  ${value} = ${CHANGE_LOCAL};\n  ${change} = true;\n  ${addRecord}\n}\n${notify}\n`;\n}\nObject.defineProperty(pipeCheckTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string], [assert.type.string], [assert.type.string], [assert.type.string], [assert.type.string], [assert.type.string]];\n  }});\nfunction referenceCheckTemplate(assignment, newValue, oldValue, change, addRecord, notify) {\n  return `\n${assignment}\nif (${newValue} !== ${oldValue} || (${newValue} !== ${newValue}) && (${oldValue} !== ${oldValue})) {\n  ${change} = true;\n  ${addRecord}\n  ${oldValue} = ${newValue};\n}\n${notify}\n`;\n}\nfunction assignmentTemplate(field, value) {\n  return `${field} = ${value};`;\n}\nObject.defineProperty(assignmentTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string]];\n  }});\nfunction localDefinitionsTemplate(names) {\n  return names.map((n) => `var ${n};`).join(\"\\n\");\n}\nObject.defineProperty(localDefinitionsTemplate, \"parameters\", {get: function() {\n    return [[List]];\n  }});\nfunction changeDefinitionsTemplate(names) {\n  return names.map((n) => `var ${n} = false;`).join(\"\\n\");\n}\nObject.defineProperty(changeDefinitionsTemplate, \"parameters\", {get: function() {\n    return [[List]];\n  }});\nfunction fieldDefinitionsTemplate(names) {\n  return names.map((n) => `${n} = ${UTIL}.unitialized();`).join(\"\\n\");\n}\nObject.defineProperty(fieldDefinitionsTemplate, \"parameters\", {get: function() {\n    return [[List]];\n  }});\nfunction ifChangedGuardTemplate(changeNames, body) {\n  var cond = changeNames.join(\" || \");\n  return `\nif (${cond}) {\n  ${body}\n}\n`;\n}\nObject.defineProperty(ifChangedGuardTemplate, \"parameters\", {get: function() {\n    return [[List], [assert.type.string]];\n  }});\nfunction addSimpleChangeRecordTemplate(protoIndex, oldValue, newValue) {\n  return `${CHANGES_LOCAL} = ${UTIL}.addRecord(${CHANGES_LOCAL},\n    ${UTIL}.simpleChangeRecord(${PROTOS_ACCESSOR}[${protoIndex}].bindingMemento, ${oldValue}, ${newValue}));`;\n}\nObject.defineProperty(addSimpleChangeRecordTemplate, \"parameters\", {get: function() {\n    return [[assert.type.number], [assert.type.string], [assert.type.string]];\n  }});\nexport class ChangeDetectorJITGenerator {\n  constructor(typeName, records) {\n    this.typeName = typeName;\n    this.records = records;\n    this.localNames = this.getLocalNames(records);\n    this.changeNames = this.getChangeNames(this.localNames);\n    this.fieldNames = this.getFieldNames(this.localNames);\n    this.pipeNames = this.getPipeNames(this.localNames);\n  }\n  getLocalNames(records) {\n    var index = 0;\n    var names = records.map((r) => {\n      var sanitizedName = r.name.replace(new RegExp(\"\\\\W\", \"g\"), '');\n      return `${sanitizedName}${index++}`;\n    });\n    return [\"context\"].concat(names);\n  }\n  getChangeNames(localNames) {\n    return localNames.map((n) => `change_${n}`);\n  }\n  getFieldNames(localNames) {\n    return localNames.map((n) => `this.${n}`);\n  }\n  getPipeNames(localNames) {\n    return localNames.map((n) => `this.${n}_pipe`);\n  }\n  generate() {\n    var text = typeTemplate(this.typeName, this.genConstructor(), this.genDetectChanges(), this.genHydrate());\n    return new Function('AbstractChangeDetector', 'ChangeDetectionUtil', 'protos', text)(AbstractChangeDetector, ChangeDetectionUtil, this.records);\n  }\n  genConstructor() {\n    return constructorTemplate(this.typeName, this.genFieldDefinitions());\n  }\n  genHydrate() {\n    return hydrateTemplate(this.typeName, this.genFieldDefinitions(), pipeOnDestroyTemplate(this.getnonNullPipeNames()));\n  }\n  genFieldDefinitions() {\n    var fields = [];\n    fields = fields.concat(this.fieldNames);\n    fields = fields.concat(this.getnonNullPipeNames());\n    return fieldDefinitionsTemplate(fields);\n  }\n  getnonNullPipeNames() {\n    var pipes = [];\n    this.records.forEach((r) => {\n      if (r.mode === RECORD_TYPE_PIPE) {\n        pipes.push(this.pipeNames[r.selfIndex]);\n      }\n    });\n    return pipes;\n  }\n  genDetectChanges() {\n    var body = this.genBody();\n    return detectChangesTemplate(this.typeName, body);\n  }\n  genBody() {\n    var rec = this.records.map((r) => this.genRecord(r)).join(\"\\n\");\n    return bodyTemplate(this.genLocalDefinitions(), this.genChangeDefinitions(), rec);\n  }\n  genLocalDefinitions() {\n    return localDefinitionsTemplate(this.localNames);\n  }\n  genChangeDefinitions() {\n    return changeDefinitionsTemplate(this.changeNames);\n  }\n  genRecord(r) {\n    if (r.mode === RECORD_TYPE_PIPE) {\n      return this.genPipeCheck(r);\n    } else {\n      return this.genReferenceCheck(r);\n    }\n  }\n  genPipeCheck(r) {\n    var context = this.localNames[r.contextIndex];\n    var pipe = this.pipeNames[r.selfIndex];\n    var newValue = this.localNames[r.selfIndex];\n    var oldValue = this.fieldNames[r.selfIndex];\n    var change = this.changeNames[r.selfIndex];\n    var addRecord = addSimpleChangeRecordTemplate(r.selfIndex - 1, oldValue, newValue);\n    var notify = this.genNotify(r);\n    return pipeCheckTemplate(context, pipe, r.name, newValue, change, addRecord, notify);\n  }\n  genReferenceCheck(r) {\n    var newValue = this.localNames[r.selfIndex];\n    var oldValue = this.fieldNames[r.selfIndex];\n    var change = this.changeNames[r.selfIndex];\n    var assignment = this.genUpdateCurrentValue(r);\n    var addRecord = addSimpleChangeRecordTemplate(r.selfIndex - 1, oldValue, newValue);\n    var notify = this.genNotify(r);\n    var check = referenceCheckTemplate(assignment, newValue, oldValue, change, r.lastInBinding ? addRecord : '', notify);\n    if (r.isPureFunction()) {\n      return this.ifChangedGuard(r, check);\n    } else {\n      return check;\n    }\n  }\n  genUpdateCurrentValue(r) {\n    var context = this.localNames[r.contextIndex];\n    var newValue = this.localNames[r.selfIndex];\n    var args = this.genArgs(r);\n    switch (r.mode) {\n      case RECORD_TYPE_SELF:\n        return assignmentTemplate(newValue, context);\n      case RECORD_TYPE_CONST:\n        return `${newValue} = ${this.genLiteral(r.funcOrValue)}`;\n      case RECORD_TYPE_PROPERTY:\n        return assignmentTemplate(newValue, `${context}.${r.name}`);\n      case RECORD_TYPE_LOCAL:\n        return assignmentTemplate(newValue, `${LOCALS_ACCESSOR}.get('${r.name}')`);\n      case RECORD_TYPE_INVOKE_METHOD:\n        return assignmentTemplate(newValue, `${context}.${r.name}(${args})`);\n      case RECORD_TYPE_INVOKE_CLOSURE:\n        return assignmentTemplate(newValue, `${context}(${args})`);\n      case RECORD_TYPE_PRIMITIVE_OP:\n        return assignmentTemplate(newValue, `${UTIL}.${r.name}(${args})`);\n      case RECORD_TYPE_INTERPOLATE:\n        return assignmentTemplate(newValue, this.genInterpolation(r));\n      case RECORD_TYPE_KEYED_ACCESS:\n        var key = this.localNames[r.args[0]];\n        return assignmentTemplate(newValue, `${context}[${key}]`);\n      default:\n        throw new BaseException(`Unknown operation ${r.mode}`);\n    }\n  }\n  ifChangedGuard(r, body) {\n    return ifChangedGuardTemplate(r.args.map((a) => this.changeNames[a]), body);\n  }\n  genInterpolation(r) {\n    var res = \"\";\n    for (var i = 0; i < r.args.length; ++i) {\n      res += this.genLiteral(r.fixedArgs[i]);\n      res += \" + \";\n      res += this.localNames[r.args[i]];\n      res += \" + \";\n    }\n    res += this.genLiteral(r.fixedArgs[r.args.length]);\n    return res;\n  }\n  genLiteral(value) {\n    return JSON.stringify(value);\n  }\n  genNotify(r) {\n    return r.lastInDirective ? notifyTemplate(r.selfIndex - 1) : '';\n  }\n  genArgs(r) {\n    return r.args.map((arg) => this.localNames[arg]).join(\", \");\n  }\n}\nObject.defineProperty(ChangeDetectorJITGenerator, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.genericType(List, ProtoRecord)]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.getLocalNames, \"parameters\", {get: function() {\n    return [[assert.genericType(List, ProtoRecord)]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.getChangeNames, \"parameters\", {get: function() {\n    return [[assert.genericType(List, String)]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.getFieldNames, \"parameters\", {get: function() {\n    return [[assert.genericType(List, String)]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.getPipeNames, \"parameters\", {get: function() {\n    return [[assert.genericType(List, String)]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.genRecord, \"parameters\", {get: function() {\n    return [[ProtoRecord]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.genPipeCheck, \"parameters\", {get: function() {\n    return [[ProtoRecord]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.genReferenceCheck, \"parameters\", {get: function() {\n    return [[ProtoRecord]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.genUpdateCurrentValue, \"parameters\", {get: function() {\n    return [[ProtoRecord]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.ifChangedGuard, \"parameters\", {get: function() {\n    return [[ProtoRecord], [assert.type.string]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.genInterpolation, \"parameters\", {get: function() {\n    return [[ProtoRecord]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.genArgs, \"parameters\", {get: function() {\n    return [[ProtoRecord]];\n  }});\n\n//# sourceMappingURL=/Users/tbosch/projects/temp/angular2_clone/modules/angular2/src/change_detection/change_detection_jit_generator.map\n\n//# sourceMappingURL=./change_detection_jit_generator.map","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","var $__placeholder__0 = $__export($__placeholder__1, $__placeholder__2);","function() {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4);\n        }()","assert.genericType($__placeholder__0)"]}