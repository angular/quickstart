{"version":3,"sources":["@traceur/generated/TemplateParser/5","src/change_detection/coalesce.js","@traceur/generated/TemplateParser/13","@traceur/generated/TemplateParser/4","@traceur/generated/TemplateParser/3","@traceur/generated/TemplateParser/9","src/change_detection/@traceur/generated/TemplateParser/8","src/change_detection/@traceur/generated/TemplateParser/26","src/change_detection/@traceur/generated/TemplateParser/7"],"names":[],"mappings":"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","file":"src/change_detection/coalesce.js","sourceRoot":"/home/tonyo/projects/quickstart/node_modules/angular2/es6/prod/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","import {isPresent} from 'angular2/src/facade/lang';\nimport {List, ListWrapper, Map, MapWrapper} from 'angular2/src/facade/collection';\nimport {RECORD_TYPE_SELF, ProtoRecord} from './proto_record';\n\n/**\n * Removes \"duplicate\" records. It assuming that record evaluation does not\n * have side-effects.\n *\n * Records that are not last in bindings are removed and all the indices\n * of the records that depend on them are updated.\n *\n * Records that are last in bindings CANNOT be removed, and instead are\n * replaced with very cheap SELF records.\n */\nexport function coalesce(records:List<ProtoRecord>):List<ProtoRecord> {\n  var res = ListWrapper.create();\n  var indexMap = MapWrapper.create();\n\n  for (var i = 0; i < records.length; ++i) {\n    var r = records[i];\n    var record = _replaceIndices(r, res.length + 1, indexMap);\n    var matchingRecord = _findMatching(record, res);\n\n    if (isPresent(matchingRecord) && record.lastInBinding) {\n      ListWrapper.push(res, _selfRecord(record, matchingRecord.selfIndex, res.length + 1));\n      MapWrapper.set(indexMap, r.selfIndex, matchingRecord.selfIndex);\n\n    } else if (isPresent(matchingRecord) && !record.lastInBinding) {\n      MapWrapper.set(indexMap, r.selfIndex, matchingRecord.selfIndex);\n\n    } else {\n      ListWrapper.push(res, record);\n      MapWrapper.set(indexMap, r.selfIndex, record.selfIndex);\n    }\n  }\n\n  return res;\n}\n\nfunction _selfRecord(r:ProtoRecord, contextIndex:number, selfIndex:number):ProtoRecord {\n  return new ProtoRecord(\n    RECORD_TYPE_SELF,\n    \"self\",\n    null,\n    [],\n    r.fixedArgs,\n    contextIndex,\n    selfIndex,\n    r.bindingMemento,\n    r.directiveMemento,\n    r.expressionAsString,\n    r.lastInBinding,\n    r.lastInDirective\n  );\n}\n\nfunction _findMatching(r:ProtoRecord, rs:List<ProtoRecord>){\n  return ListWrapper.find(rs, (rr) =>\n    rr.mode === r.mode &&\n    rr.funcOrValue === r.funcOrValue &&\n    rr.contextIndex === r.contextIndex &&\n    ListWrapper.equals(rr.args, r.args)\n  );\n}\n\nfunction _replaceIndices(r:ProtoRecord, selfIndex:number, indexMap:Map) {\n  var args = ListWrapper.map(r.args, (a) => _map(indexMap, a));\n  var contextIndex = _map(indexMap, r.contextIndex);\n  return new ProtoRecord(\n    r.mode,\n    r.name,\n    r.funcOrValue,\n    args,\n    r.fixedArgs,\n    contextIndex,\n    selfIndex,\n    r.bindingMemento,\n    r.directiveMemento,\n    r.expressionAsString,\n    r.lastInBinding,\n    r.lastInDirective\n  );\n}\n\nfunction _map(indexMap:Map, value:number) {\n  var r = MapWrapper.get(indexMap, value)\n  return isPresent(r) ? r : value;\n}","\n        $__export($__placeholder__0, $__placeholder__1)\n      ","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.genericType($__placeholder__0)","assert.type.$__placeholder__0)"]}