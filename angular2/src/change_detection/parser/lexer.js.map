{"version":3,"sources":["@traceur/generated/TemplateParser/5","src/change_detection/parser/lexer.js","@traceur/generated/TemplateParser/4","@traceur/generated/TemplateParser/3","@traceur/generated/TemplateParser/9","@traceur/generated/TemplateParser/7","@traceur/generated/TemplateParser/6","@traceur/generated/TemplateParser/10","src/change_detection/parser/@traceur/generated/TemplateParser/24","src/change_detection/parser/@traceur/generated/TemplateParser/23","@traceur/generated/TemplateParser/12","@traceur/generated/TemplateParser/11","@traceur/generated/TemplateParser/14","@traceur/generated/TemplateParser/21"],"names":[],"mappings":"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","file":"src/change_detection/parser/lexer.js","sourceRoot":"/Users/deast/Angular/quickstart/node_modules/angular2/es6/prod/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","import {Injectable} from 'angular2/di';\nimport {List, ListWrapper, SetWrapper} from \"angular2/src/facade/collection\";\nimport {int, NumberWrapper, StringJoiner, StringWrapper} from \"angular2/src/facade/lang\";\n\nexport const TOKEN_TYPE_CHARACTER  = 1;\nexport const TOKEN_TYPE_IDENTIFIER = 2;\nexport const TOKEN_TYPE_KEYWORD    = 3;\nexport const TOKEN_TYPE_STRING     = 4;\nexport const TOKEN_TYPE_OPERATOR   = 5;\nexport const TOKEN_TYPE_NUMBER     = 6;\n\n@Injectable()\nexport class Lexer {\n  text:string;\n  tokenize(text:string):List {\n    var scanner = new _Scanner(text);\n    var tokens = [];\n    var token = scanner.scanToken();\n    while (token != null) {\n      ListWrapper.push(tokens, token);\n      token = scanner.scanToken();\n    }\n    return tokens;\n  }\n}\n\nexport class Token {\n  index:int;\n  type:int;\n  _numValue:number;\n  _strValue:string;\n  constructor(index:int, type:int, numValue:number, strValue:string) {\n    /**\n     * NOTE: To ensure that this constructor creates the same hidden class each time, ensure that\n     * all the fields are assigned to in the exact same order in each run of this constructor.\n     */\n    this.index = index;\n    this.type = type;\n    this._numValue = numValue;\n    this._strValue = strValue;\n  }\n\n  isCharacter(code:int):boolean {\n    return (this.type == TOKEN_TYPE_CHARACTER && this._numValue == code);\n  }\n\n  isNumber():boolean {\n    return (this.type == TOKEN_TYPE_NUMBER);\n  }\n\n  isString():boolean {\n    return (this.type == TOKEN_TYPE_STRING);\n  }\n\n  isOperator(operater:string):boolean {\n    return (this.type == TOKEN_TYPE_OPERATOR && this._strValue == operater);\n  }\n\n  isIdentifier():boolean {\n    return (this.type == TOKEN_TYPE_IDENTIFIER);\n  }\n\n  isKeyword():boolean {\n    return (this.type == TOKEN_TYPE_KEYWORD);\n  }\n\n  isKeywordVar():boolean {\n    return (this.type == TOKEN_TYPE_KEYWORD && this._strValue == \"var\");\n  }\n\n  isKeywordNull():boolean {\n    return (this.type == TOKEN_TYPE_KEYWORD && this._strValue == \"null\");\n  }\n\n  isKeywordUndefined():boolean {\n    return (this.type == TOKEN_TYPE_KEYWORD && this._strValue == \"undefined\");\n  }\n\n  isKeywordTrue():boolean {\n    return (this.type == TOKEN_TYPE_KEYWORD && this._strValue == \"true\");\n  }\n\n  isKeywordFalse():boolean {\n    return (this.type == TOKEN_TYPE_KEYWORD && this._strValue == \"false\");\n  }\n\n  toNumber():number {\n    // -1 instead of NULL ok?\n    return (this.type == TOKEN_TYPE_NUMBER) ? this._numValue : -1;\n  }\n\n  toString():string {\n    var type:int = this.type;\n    if (type >= TOKEN_TYPE_CHARACTER && type <= TOKEN_TYPE_STRING) {\n      return this._strValue;\n    } else if (type == TOKEN_TYPE_NUMBER) {\n      return this._numValue.toString();\n    } else {\n      return null;\n    }\n  }\n}\n\nfunction newCharacterToken(index:int, code:int):Token {\n  return new Token(index, TOKEN_TYPE_CHARACTER, code, StringWrapper.fromCharCode(code));\n}\n\nfunction newIdentifierToken(index:int, text:string):Token {\n  return new Token(index, TOKEN_TYPE_IDENTIFIER, 0, text);\n}\n\nfunction newKeywordToken(index:int, text:string):Token {\n  return new Token(index, TOKEN_TYPE_KEYWORD, 0, text);\n}\n\nfunction newOperatorToken(index:int, text:string):Token {\n  return new Token(index, TOKEN_TYPE_OPERATOR, 0, text);\n}\n\nfunction newStringToken(index:int, text:string):Token {\n  return new Token(index, TOKEN_TYPE_STRING, 0, text);\n}\n\nfunction newNumberToken(index:int, n:number):Token {\n  return new Token(index, TOKEN_TYPE_NUMBER, n, \"\");\n}\n\n\nexport var EOF:Token = new Token(-1, 0, 0, \"\");\n\nexport const $EOF       = 0;\nexport const $TAB       = 9;\nexport const $LF        = 10;\nexport const $VTAB      = 11;\nexport const $FF        = 12;\nexport const $CR        = 13;\nexport const $SPACE     = 32;\nexport const $BANG      = 33;\nexport const $DQ        = 34;\nexport const $HASH      = 35;\nexport const $$         = 36;\nexport const $PERCENT   = 37;\nexport const $AMPERSAND = 38;\nexport const $SQ        = 39;\nexport const $LPAREN    = 40;\nexport const $RPAREN    = 41;\nexport const $STAR      = 42;\nexport const $PLUS      = 43;\nexport const $COMMA     = 44;\nexport const $MINUS     = 45;\nexport const $PERIOD    = 46;\nexport const $SLASH     = 47;\nexport const $COLON     = 58;\nexport const $SEMICOLON = 59;\nexport const $LT        = 60;\nexport const $EQ        = 61;\nexport const $GT        = 62;\nexport const $QUESTION  = 63;\n\nconst $0 = 48;\nconst $9 = 57;\n\nconst $A = 65, $B = 66, $C = 67, $D = 68, $E = 69, $F = 70, $G = 71, $H = 72,\n      $I = 73, $J = 74, $K = 75, $L = 76, $M = 77, $N = 78, $O = 79, $P = 80,\n      $Q = 81, $R = 82, $S = 83, $T = 84, $U = 85, $V = 86, $W = 87, $X = 88,\n      $Y = 89, $Z = 90;\n\nexport const $LBRACKET  = 91;\nexport const $BACKSLASH = 92;\nexport const $RBRACKET  = 93;\nconst $CARET     = 94;\nconst $_         = 95;\n\nconst $a =  97, $b =  98, $c =  99, $d = 100, $e = 101, $f = 102, $g = 103,\n      $h = 104, $i = 105, $j = 106, $k = 107, $l = 108, $m = 109, $n = 110,\n      $o = 111, $p = 112, $q = 113, $r = 114, $s = 115, $t = 116, $u = 117,\n      $v = 118, $w = 119, $x = 120, $y = 121, $z = 122;\n\nexport const $LBRACE = 123;\nexport const $BAR    = 124;\nexport const $RBRACE = 125;\nconst $TILDE  = 126;\nconst $NBSP   = 160;\n\n\nexport class ScannerError extends Error {\n  message:string;\n  constructor(message) {\n    super();\n    this.message = message;\n  }\n\n  toString() {\n    return this.message;\n  }\n}\n\nclass _Scanner {\n  input:string;\n  length:int;\n  peek:int;\n  index:int;\n\n  constructor(input:string) {\n    this.input = input;\n    this.length = input.length;\n    this.peek = 0;\n    this.index = -1;\n    this.advance();\n  }\n\n  advance() {\n    this.peek = ++this.index >= this.length ? $EOF : StringWrapper.charCodeAt(this.input, this.index);\n  }\n\n  scanToken():Token {\n    var input = this.input,\n        length = this.length,\n        peek = this.peek,\n        index = this.index;\n\n    // Skip whitespace.\n    while (peek <= $SPACE) {\n      if (++index >= length) {\n        peek = $EOF;\n        break;\n      } else {\n        peek = StringWrapper.charCodeAt(input, index);\n      }\n    }\n\n    this.peek = peek;\n    this.index = index;\n\n    if (index >= length) {\n      return null;\n    }\n\n    // Handle identifiers and numbers.\n    if (isIdentifierStart(peek)) return this.scanIdentifier();\n    if (isDigit(peek)) return this.scanNumber(index);\n\n    var start:int = index;\n    switch (peek) {\n      case $PERIOD:\n        this.advance();\n        return isDigit(this.peek) ? this.scanNumber(start) :\n                                    newCharacterToken(start, $PERIOD);\n      case $LPAREN:   case $RPAREN:\n      case $LBRACE:   case $RBRACE:\n      case $LBRACKET: case $RBRACKET:\n      case $COMMA:\n      case $COLON:\n      case $SEMICOLON:\n        return this.scanCharacter(start, peek);\n      case $SQ:\n      case $DQ:\n        return this.scanString();\n      case $HASH:\n        return this.scanOperator(start, StringWrapper.fromCharCode(peek));\n      case $PLUS:\n      case $MINUS:\n      case $STAR:\n      case $SLASH:\n      case $PERCENT:\n      case $CARET:\n      case $QUESTION:\n        return this.scanOperator(start, StringWrapper.fromCharCode(peek));\n      case $LT:\n      case $GT:\n      case $BANG:\n      case $EQ:\n        return this.scanComplexOperator(start, $EQ, StringWrapper.fromCharCode(peek), '=');\n      case $AMPERSAND:\n        return this.scanComplexOperator(start, $AMPERSAND, '&', '&');\n      case $BAR:\n        return this.scanComplexOperator(start, $BAR, '|', '|');\n      case $TILDE:\n        return this.scanComplexOperator(start, $SLASH, '~', '/');\n      case $NBSP:\n        while (isWhitespace(this.peek)) this.advance();\n        return this.scanToken();\n    }\n\n    this.error(`Unexpected character [${StringWrapper.fromCharCode(peek)}]`, 0);\n    return null;\n  }\n\n  scanCharacter(start:int, code:int):Token {\n    assert(this.peek == code);\n    this.advance();\n    return newCharacterToken(start, code);\n  }\n\n\n  scanOperator(start:int, str:string):Token {\n    assert(this.peek == StringWrapper.charCodeAt(str, 0));\n    assert(SetWrapper.has(OPERATORS, str));\n    this.advance();\n    return newOperatorToken(start, str);\n  }\n\n  scanComplexOperator(start:int, code:int, one:string, two:string):Token {\n    assert(this.peek == StringWrapper.charCodeAt(one, 0));\n    this.advance();\n    var str:string = one;\n    if (this.peek == code) {\n      this.advance();\n      str += two;\n    }\n    assert(SetWrapper.has(OPERATORS, str));\n    return newOperatorToken(start, str);\n  }\n\n  scanIdentifier():Token {\n    assert(isIdentifierStart(this.peek));\n    var start:int = this.index;\n    this.advance();\n    while (isIdentifierPart(this.peek)) this.advance();\n    var str:string = this.input.substring(start, this.index);\n    if (SetWrapper.has(KEYWORDS, str)) {\n      return newKeywordToken(start, str);\n    } else {\n      return newIdentifierToken(start, str);\n    }\n  }\n\n  scanNumber(start:int):Token {\n    assert(isDigit(this.peek));\n    var simple:boolean = (this.index === start);\n    this.advance();  // Skip initial digit.\n    while (true) {\n      if (isDigit(this.peek)) {\n        // Do nothing.\n      } else if (this.peek == $PERIOD) {\n        simple = false;\n      } else if (isExponentStart(this.peek)) {\n        this.advance();\n        if (isExponentSign(this.peek)) this.advance();\n        if (!isDigit(this.peek)) this.error('Invalid exponent', -1);\n        simple = false;\n      } else {\n        break;\n      }\n      this.advance();\n    }\n    var str:string = this.input.substring(start, this.index);\n    // TODO\n    var value:number = simple ? NumberWrapper.parseIntAutoRadix(str) : NumberWrapper.parseFloat(str);\n    return newNumberToken(start, value);\n  }\n\n  scanString():Token {\n    assert(this.peek == $SQ || this.peek == $DQ);\n    var start:int = this.index;\n    var quote:int = this.peek;\n    this.advance();  // Skip initial quote.\n\n    var buffer:StringJoiner;\n    var marker:int = this.index;\n    var input:string = this.input;\n\n    while (this.peek != quote) {\n      if (this.peek == $BACKSLASH) {\n        if (buffer == null) buffer = new StringJoiner();\n        buffer.add(input.substring(marker, this.index));\n        this.advance();\n        var unescapedCode:int;\n        if (this.peek == $u) {\n          // 4 character hex code for unicode character.\n          var hex:string = input.substring(this.index + 1, this.index + 5);\n          try {\n            unescapedCode = NumberWrapper.parseInt(hex, 16);\n          } catch (e) {\n            this.error(`Invalid unicode escape [\\\\u${hex}]`, 0);\n          }\n          for (var i:int = 0; i < 5; i++) {\n            this.advance();\n          }\n        } else {\n          unescapedCode = unescape(this.peek);\n          this.advance();\n        }\n        buffer.add(StringWrapper.fromCharCode(unescapedCode));\n        marker = this.index;\n      } else if (this.peek == $EOF) {\n        this.error('Unterminated quote', 0);\n      } else {\n        this.advance();\n      }\n    }\n\n    var last:string = input.substring(marker, this.index);\n    this.advance();  // Skip terminating quote.\n\n    // Compute the unescaped string value.\n    var unescaped:string = last;\n    if (buffer != null) {\n      buffer.add(last);\n      unescaped = buffer.toString();\n    }\n    return newStringToken(start, unescaped);\n  }\n\n  error(message:string, offset:int) {\n    var position:int = this.index + offset;\n    throw new ScannerError(`Lexer Error: ${message} at column ${position} in expression [${this.input}]`);\n  }\n}\n\nfunction isWhitespace(code:int):boolean {\n  return (code >= $TAB && code <= $SPACE) || (code == $NBSP);\n}\n\nfunction isIdentifierStart(code:int):boolean {\n  return ($a <= code && code <= $z) ||\n         ($A <= code && code <= $Z) ||\n         (code == $_) ||\n         (code == $$);\n}\n\nfunction isIdentifierPart(code:int):boolean {\n  return ($a <= code && code <= $z) ||\n         ($A <= code && code <= $Z) ||\n         ($0 <= code && code <= $9) ||\n         (code == $_) ||\n         (code == $$);\n}\n\nfunction isDigit(code:int):boolean {\n  return $0 <= code && code <= $9;\n}\n\nfunction isExponentStart(code:int):boolean {\n  return code == $e || code == $E;\n}\n\nfunction isExponentSign(code:int):boolean {\n  return code == $MINUS || code == $PLUS;\n}\n\nfunction unescape(code:int):int {\n  switch(code) {\n    case $n: return $LF;\n    case $f: return $FF;\n    case $r: return $CR;\n    case $t: return $TAB;\n    case $v: return $VTAB;\n    default: return code;\n  }\n}\n\nvar OPERATORS = SetWrapper.createFromList([\n  '+',\n  '-',\n  '*',\n  '/',\n  '~/',\n  '%',\n  '^',\n  '=',\n  '==',\n  '!=',\n  '<',\n  '>',\n  '<=',\n  '>=',\n  '&&',\n  '||',\n  '&',\n  '|',\n  '!',\n  '?',\n  '#'\n]);\n\n\nvar KEYWORDS = SetWrapper.createFromList([\n    'var',\n    'null',\n    'undefined',\n    'true',\n    'false',\n]);\n","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","$__export($__placeholder__0, $__placeholder__1)","var $__placeholder__0 = $__export($__placeholder__1, $__placeholder__2);","function() {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4);\n        }()","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.type.$__placeholder__0)","function($__super) {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4, $__super);\n        }($__placeholder__5)","$traceurRuntime.superConstructor($__placeholder__0).call($__placeholder__1)","$__placeholder__0 = $__placeholder__1","void 0"]}